
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e3c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003020  08003020  00013020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003050  08003050  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003050  08003050  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003050  08003050  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003050  08003050  00013050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003054  08003054  00013054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003058  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000018  0800306c  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  0800306c  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8d0  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f81  00000000  00000000  0002c90d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  0002e890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  0002f5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198c1  00000000  00000000  00030288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e660  00000000  00000000  00049b49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a2e5  00000000  00000000  000581a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f248e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037a8  00000000  00000000  000f24e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000018 	.word	0x20000018
 8000200:	00000000 	.word	0x00000000
 8000204:	08003008 	.word	0x08003008

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000001c 	.word	0x2000001c
 8000220:	08003008 	.word	0x08003008

08000224 <SoftSerial_GPIOCallBack>:
	StatHILOW = 1, StatBusy = 2, StatAdresPos = 2, StatAdresMask = 28
};

int debug[2][12] = { 0 }, index = 0;

void SoftSerial_GPIOCallBack() {
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
	int mask = EXTI->IMR;
 800022a:	4b15      	ldr	r3, [pc, #84]	; (8000280 <SoftSerial_GPIOCallBack+0x5c>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	603b      	str	r3, [r7, #0]
	EXTI->PR = mask;
 8000230:	4a13      	ldr	r2, [pc, #76]	; (8000280 <SoftSerial_GPIOCallBack+0x5c>)
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	6153      	str	r3, [r2, #20]

	for (int i = 0; i < SoftSerial_Max; i++) {
 8000236:	2300      	movs	r3, #0
 8000238:	607b      	str	r3, [r7, #4]
 800023a:	e019      	b.n	8000270 <SoftSerial_GPIOCallBack+0x4c>
		if ((SoftSerial_RX_PIN[i] & mask) == SoftSerial_RX_PIN[i]) {
 800023c:	4a11      	ldr	r2, [pc, #68]	; (8000284 <SoftSerial_GPIOCallBack+0x60>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000244:	461a      	mov	r2, r3
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	4013      	ands	r3, r2
 800024a:	490e      	ldr	r1, [pc, #56]	; (8000284 <SoftSerial_GPIOCallBack+0x60>)
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000252:	4293      	cmp	r3, r2
 8000254:	d109      	bne.n	800026a <SoftSerial_GPIOCallBack+0x46>
			SoftSerial_UpdateTime(i);
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	b2db      	uxtb	r3, r3
 800025a:	4618      	mov	r0, r3
 800025c:	f000 f89a 	bl	8000394 <SoftSerial_UpdateTime>
			SoftSerial_UpdateData(i);
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	b2db      	uxtb	r3, r3
 8000264:	4618      	mov	r0, r3
 8000266:	f000 f91b 	bl	80004a0 <SoftSerial_UpdateData>
	for (int i = 0; i < SoftSerial_Max; i++) {
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	3301      	adds	r3, #1
 800026e:	607b      	str	r3, [r7, #4]
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2b00      	cmp	r3, #0
 8000274:	dde2      	ble.n	800023c <SoftSerial_GPIOCallBack+0x18>
		}
	}
}
 8000276:	bf00      	nop
 8000278:	bf00      	nop
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	40010400 	.word	0x40010400
 8000284:	20000000 	.word	0x20000000

08000288 <SoftSerial_TimerCallBack>:

void SoftSerial_TimerCallBack() {
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
	if ((SoftSerial_Timer->SR & TIM_SR_UIF) == TIM_SR_UIF) {
 800028e:	4b2d      	ldr	r3, [pc, #180]	; (8000344 <SoftSerial_TimerCallBack+0xbc>)
 8000290:	691b      	ldr	r3, [r3, #16]
 8000292:	f003 0301 	and.w	r3, r3, #1
 8000296:	2b01      	cmp	r3, #1
 8000298:	d10d      	bne.n	80002b6 <SoftSerial_TimerCallBack+0x2e>
		SoftSerial_Timer->SR &= ~TIM_SR_UIF;
 800029a:	4b2a      	ldr	r3, [pc, #168]	; (8000344 <SoftSerial_TimerCallBack+0xbc>)
 800029c:	691b      	ldr	r3, [r3, #16]
 800029e:	4a29      	ldr	r2, [pc, #164]	; (8000344 <SoftSerial_TimerCallBack+0xbc>)
 80002a0:	f023 0301 	bic.w	r3, r3, #1
 80002a4:	6113      	str	r3, [r2, #16]
		softSerial.TimerOver++;
 80002a6:	4b28      	ldr	r3, [pc, #160]	; (8000348 <SoftSerial_TimerCallBack+0xc0>)
 80002a8:	f8b3 30e4 	ldrh.w	r3, [r3, #228]	; 0xe4
 80002ac:	3301      	adds	r3, #1
 80002ae:	b29a      	uxth	r2, r3
 80002b0:	4b25      	ldr	r3, [pc, #148]	; (8000348 <SoftSerial_TimerCallBack+0xc0>)
 80002b2:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	}

	for (int i = 0; i < SoftSerial_Max; i++) {
 80002b6:	2300      	movs	r3, #0
 80002b8:	607b      	str	r3, [r7, #4]
 80002ba:	e03a      	b.n	8000332 <SoftSerial_TimerCallBack+0xaa>
		int max = SoftSerial_GetTime() + softSerial.RxBitTime * 20;
 80002bc:	f000 f846 	bl	800034c <SoftSerial_GetTime>
 80002c0:	4602      	mov	r2, r0
 80002c2:	460b      	mov	r3, r1
 80002c4:	4611      	mov	r1, r2
 80002c6:	4b20      	ldr	r3, [pc, #128]	; (8000348 <SoftSerial_TimerCallBack+0xc0>)
 80002c8:	f8b3 30e2 	ldrh.w	r3, [r3, #226]	; 0xe2
 80002cc:	461a      	mov	r2, r3
 80002ce:	4613      	mov	r3, r2
 80002d0:	009b      	lsls	r3, r3, #2
 80002d2:	4413      	add	r3, r2
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	440b      	add	r3, r1
 80002d8:	603b      	str	r3, [r7, #0]
		if (softSerial.RxTimeH[i] <= max) {
 80002da:	4a1b      	ldr	r2, [pc, #108]	; (8000348 <SoftSerial_TimerCallBack+0xc0>)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	331a      	adds	r3, #26
 80002e0:	00db      	lsls	r3, r3, #3
 80002e2:	4413      	add	r3, r2
 80002e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002e8:	6839      	ldr	r1, [r7, #0]
 80002ea:	4608      	mov	r0, r1
 80002ec:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80002f0:	4299      	cmp	r1, r3
 80002f2:	bf08      	it	eq
 80002f4:	4290      	cmpeq	r0, r2
 80002f6:	d319      	bcc.n	800032c <SoftSerial_TimerCallBack+0xa4>
			if (softSerial.RxStat[i] & StatBusy) {
 80002f8:	4a13      	ldr	r2, [pc, #76]	; (8000348 <SoftSerial_TimerCallBack+0xc0>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4413      	add	r3, r2
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	f003 0302 	and.w	r3, r3, #2
 8000304:	2b00      	cmp	r3, #0
 8000306:	d005      	beq.n	8000314 <SoftSerial_TimerCallBack+0x8c>
				SoftSerial_MakeData(i, 255);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	b2db      	uxtb	r3, r3
 800030c:	21ff      	movs	r1, #255	; 0xff
 800030e:	4618      	mov	r0, r3
 8000310:	f000 f956 	bl	80005c0 <SoftSerial_MakeData>
			}
			softSerial.RxStat[i] &= ~StatBusy;
 8000314:	4a0c      	ldr	r2, [pc, #48]	; (8000348 <SoftSerial_TimerCallBack+0xc0>)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	4413      	add	r3, r2
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	f023 0302 	bic.w	r3, r3, #2
 8000320:	b2d9      	uxtb	r1, r3
 8000322:	4a09      	ldr	r2, [pc, #36]	; (8000348 <SoftSerial_TimerCallBack+0xc0>)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4413      	add	r3, r2
 8000328:	460a      	mov	r2, r1
 800032a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < SoftSerial_Max; i++) {
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	3301      	adds	r3, #1
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	2b00      	cmp	r3, #0
 8000336:	ddc1      	ble.n	80002bc <SoftSerial_TimerCallBack+0x34>
		}
	}
}
 8000338:	bf00      	nop
 800033a:	bf00      	nop
 800033c:	3708      	adds	r7, #8
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40012c00 	.word	0x40012c00
 8000348:	200000a0 	.word	0x200000a0

0800034c <SoftSerial_GetTime>:

uint64_t SoftSerial_GetTime() {
 800034c:	b4b0      	push	{r4, r5, r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
	uint64_t t = softSerial.TimerOver * 65536;
 8000352:	4b0e      	ldr	r3, [pc, #56]	; (800038c <SoftSerial_GetTime+0x40>)
 8000354:	f8b3 30e4 	ldrh.w	r3, [r3, #228]	; 0xe4
 8000358:	041b      	lsls	r3, r3, #16
 800035a:	461a      	mov	r2, r3
 800035c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000360:	e9c7 2300 	strd	r2, r3, [r7]
	t += SoftSerial_Timer->CNT;
 8000364:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <SoftSerial_GetTime+0x44>)
 8000366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000368:	461a      	mov	r2, r3
 800036a:	f04f 0300 	mov.w	r3, #0
 800036e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000372:	1884      	adds	r4, r0, r2
 8000374:	eb41 0503 	adc.w	r5, r1, r3
 8000378:	e9c7 4500 	strd	r4, r5, [r7]
	return t;
 800037c:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8000380:	4610      	mov	r0, r2
 8000382:	4619      	mov	r1, r3
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	bcb0      	pop	{r4, r5, r7}
 800038a:	4770      	bx	lr
 800038c:	200000a0 	.word	0x200000a0
 8000390:	40012c00 	.word	0x40012c00

08000394 <SoftSerial_UpdateTime>:

void SoftSerial_UpdateTime(uint8_t i) {
 8000394:	b590      	push	{r4, r7, lr}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
	if ((SoftSerial_RX_PORT[i]->IDR & SoftSerial_RX_PIN[i]) == SoftSerial_RX_PIN[i]) {
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	4a3c      	ldr	r2, [pc, #240]	; (8000494 <SoftSerial_UpdateTime+0x100>)
 80003a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	79fa      	ldrb	r2, [r7, #7]
 80003aa:	493b      	ldr	r1, [pc, #236]	; (8000498 <SoftSerial_UpdateTime+0x104>)
 80003ac:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80003b0:	4013      	ands	r3, r2
 80003b2:	79fa      	ldrb	r2, [r7, #7]
 80003b4:	4938      	ldr	r1, [pc, #224]	; (8000498 <SoftSerial_UpdateTime+0x104>)
 80003b6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d133      	bne.n	8000426 <SoftSerial_UpdateTime+0x92>
		if (!(softSerial.RxStat[i] & StatHILOW)) {
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	4a36      	ldr	r2, [pc, #216]	; (800049c <SoftSerial_UpdateTime+0x108>)
 80003c2:	5cd3      	ldrb	r3, [r2, r3]
 80003c4:	f003 0301 	and.w	r3, r3, #1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d15f      	bne.n	800048c <SoftSerial_UpdateTime+0xf8>
			softSerial.RxStat[i] |= StatHILOW;
 80003cc:	79fb      	ldrb	r3, [r7, #7]
 80003ce:	4a33      	ldr	r2, [pc, #204]	; (800049c <SoftSerial_UpdateTime+0x108>)
 80003d0:	5cd2      	ldrb	r2, [r2, r3]
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	f042 0201 	orr.w	r2, r2, #1
 80003d8:	b2d1      	uxtb	r1, r2
 80003da:	4a30      	ldr	r2, [pc, #192]	; (800049c <SoftSerial_UpdateTime+0x108>)
 80003dc:	54d1      	strb	r1, [r2, r3]
			softSerial.RxTimeH[i] = SoftSerial_GetTime();
 80003de:	79fc      	ldrb	r4, [r7, #7]
 80003e0:	f7ff ffb4 	bl	800034c <SoftSerial_GetTime>
 80003e4:	4602      	mov	r2, r0
 80003e6:	460b      	mov	r3, r1
 80003e8:	482c      	ldr	r0, [pc, #176]	; (800049c <SoftSerial_UpdateTime+0x108>)
 80003ea:	f104 011a 	add.w	r1, r4, #26
 80003ee:	00c9      	lsls	r1, r1, #3
 80003f0:	4401      	add	r1, r0
 80003f2:	e9c1 2300 	strd	r2, r3, [r1]
			softSerial.RxTime[i] = softSerial.RxTimeH[i] - softSerial.RxTimeL[i];
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	4a28      	ldr	r2, [pc, #160]	; (800049c <SoftSerial_UpdateTime+0x108>)
 80003fa:	331a      	adds	r3, #26
 80003fc:	00db      	lsls	r3, r3, #3
 80003fe:	4413      	add	r3, r2
 8000400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000404:	b291      	uxth	r1, r2
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	4a24      	ldr	r2, [pc, #144]	; (800049c <SoftSerial_UpdateTime+0x108>)
 800040a:	331b      	adds	r3, #27
 800040c:	00db      	lsls	r3, r3, #3
 800040e:	4413      	add	r3, r2
 8000410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000414:	b292      	uxth	r2, r2
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	1a8a      	subs	r2, r1, r2
 800041a:	b291      	uxth	r1, r2
 800041c:	4a1f      	ldr	r2, [pc, #124]	; (800049c <SoftSerial_UpdateTime+0x108>)
 800041e:	3370      	adds	r3, #112	; 0x70
 8000420:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			softSerial.RxStat[i] &= ~StatHILOW;
			softSerial.RxTimeL[i] = SoftSerial_GetTime();
			softSerial.RxTime[i] = softSerial.RxTimeL[i] - softSerial.RxTimeH[i];
		}
	}
}
 8000424:	e032      	b.n	800048c <SoftSerial_UpdateTime+0xf8>
		if (softSerial.RxStat[i] & StatHILOW) {
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	4a1c      	ldr	r2, [pc, #112]	; (800049c <SoftSerial_UpdateTime+0x108>)
 800042a:	5cd3      	ldrb	r3, [r2, r3]
 800042c:	f003 0301 	and.w	r3, r3, #1
 8000430:	2b00      	cmp	r3, #0
 8000432:	d02b      	beq.n	800048c <SoftSerial_UpdateTime+0xf8>
			softSerial.RxStat[i] &= ~StatHILOW;
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	4a19      	ldr	r2, [pc, #100]	; (800049c <SoftSerial_UpdateTime+0x108>)
 8000438:	5cd2      	ldrb	r2, [r2, r3]
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	f022 0201 	bic.w	r2, r2, #1
 8000440:	b2d1      	uxtb	r1, r2
 8000442:	4a16      	ldr	r2, [pc, #88]	; (800049c <SoftSerial_UpdateTime+0x108>)
 8000444:	54d1      	strb	r1, [r2, r3]
			softSerial.RxTimeL[i] = SoftSerial_GetTime();
 8000446:	79fc      	ldrb	r4, [r7, #7]
 8000448:	f7ff ff80 	bl	800034c <SoftSerial_GetTime>
 800044c:	4602      	mov	r2, r0
 800044e:	460b      	mov	r3, r1
 8000450:	4812      	ldr	r0, [pc, #72]	; (800049c <SoftSerial_UpdateTime+0x108>)
 8000452:	f104 011b 	add.w	r1, r4, #27
 8000456:	00c9      	lsls	r1, r1, #3
 8000458:	4401      	add	r1, r0
 800045a:	e9c1 2300 	strd	r2, r3, [r1]
			softSerial.RxTime[i] = softSerial.RxTimeL[i] - softSerial.RxTimeH[i];
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	4a0e      	ldr	r2, [pc, #56]	; (800049c <SoftSerial_UpdateTime+0x108>)
 8000462:	331b      	adds	r3, #27
 8000464:	00db      	lsls	r3, r3, #3
 8000466:	4413      	add	r3, r2
 8000468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800046c:	b291      	uxth	r1, r2
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	4a0a      	ldr	r2, [pc, #40]	; (800049c <SoftSerial_UpdateTime+0x108>)
 8000472:	331a      	adds	r3, #26
 8000474:	00db      	lsls	r3, r3, #3
 8000476:	4413      	add	r3, r2
 8000478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800047c:	b292      	uxth	r2, r2
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	1a8a      	subs	r2, r1, r2
 8000482:	b291      	uxth	r1, r2
 8000484:	4a05      	ldr	r2, [pc, #20]	; (800049c <SoftSerial_UpdateTime+0x108>)
 8000486:	3370      	adds	r3, #112	; 0x70
 8000488:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 800048c:	bf00      	nop
 800048e:	370c      	adds	r7, #12
 8000490:	46bd      	mov	sp, r7
 8000492:	bd90      	pop	{r4, r7, pc}
 8000494:	20000004 	.word	0x20000004
 8000498:	20000000 	.word	0x20000000
 800049c:	200000a0 	.word	0x200000a0

080004a0 <SoftSerial_UpdateData>:

void SoftSerial_UpdateData(uint8_t i) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	71fb      	strb	r3, [r7, #7]

	if (softSerial.RxTime[i] >= softSerial.RxBitTime * 10) {
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	4a41      	ldr	r2, [pc, #260]	; (80005b4 <SoftSerial_UpdateData+0x114>)
 80004ae:	3370      	adds	r3, #112	; 0x70
 80004b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004b4:	4619      	mov	r1, r3
 80004b6:	4b3f      	ldr	r3, [pc, #252]	; (80005b4 <SoftSerial_UpdateData+0x114>)
 80004b8:	f8b3 30e2 	ldrh.w	r3, [r3, #226]	; 0xe2
 80004bc:	461a      	mov	r2, r3
 80004be:	4613      	mov	r3, r2
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	4413      	add	r3, r2
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	4299      	cmp	r1, r3
 80004c8:	db14      	blt.n	80004f4 <SoftSerial_UpdateData+0x54>
		if (softSerial.RxStat[i] & StatBusy) {
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	4a39      	ldr	r2, [pc, #228]	; (80005b4 <SoftSerial_UpdateData+0x114>)
 80004ce:	5cd3      	ldrb	r3, [r2, r3]
 80004d0:	f003 0302 	and.w	r3, r3, #2
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d004      	beq.n	80004e2 <SoftSerial_UpdateData+0x42>
			SoftSerial_MakeData(i, 255);
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	21ff      	movs	r1, #255	; 0xff
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 f86f 	bl	80005c0 <SoftSerial_MakeData>
		}
		softSerial.RxStat[i] &= ~StatBusy;
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	4a33      	ldr	r2, [pc, #204]	; (80005b4 <SoftSerial_UpdateData+0x114>)
 80004e6:	5cd2      	ldrb	r2, [r2, r3]
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	f022 0202 	bic.w	r2, r2, #2
 80004ee:	b2d1      	uxtb	r1, r2
 80004f0:	4a30      	ldr	r2, [pc, #192]	; (80005b4 <SoftSerial_UpdateData+0x114>)
 80004f2:	54d1      	strb	r1, [r2, r3]
	}

	debug[0][index] = softSerial.RxTime[i];
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	4a2f      	ldr	r2, [pc, #188]	; (80005b4 <SoftSerial_UpdateData+0x114>)
 80004f8:	3370      	adds	r3, #112	; 0x70
 80004fa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80004fe:	4b2e      	ldr	r3, [pc, #184]	; (80005b8 <SoftSerial_UpdateData+0x118>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4611      	mov	r1, r2
 8000504:	4a2d      	ldr	r2, [pc, #180]	; (80005bc <SoftSerial_UpdateData+0x11c>)
 8000506:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	debug[1][index++] = softSerial.RxStat[i] & StatHILOW;
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	4a29      	ldr	r2, [pc, #164]	; (80005b4 <SoftSerial_UpdateData+0x114>)
 800050e:	5cd3      	ldrb	r3, [r2, r3]
 8000510:	4618      	mov	r0, r3
 8000512:	4b29      	ldr	r3, [pc, #164]	; (80005b8 <SoftSerial_UpdateData+0x118>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	1c5a      	adds	r2, r3, #1
 8000518:	4927      	ldr	r1, [pc, #156]	; (80005b8 <SoftSerial_UpdateData+0x118>)
 800051a:	600a      	str	r2, [r1, #0]
 800051c:	f000 0201 	and.w	r2, r0, #1
 8000520:	4926      	ldr	r1, [pc, #152]	; (80005bc <SoftSerial_UpdateData+0x11c>)
 8000522:	330c      	adds	r3, #12
 8000524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!(softSerial.RxStat[i] & StatBusy)) {
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	4a22      	ldr	r2, [pc, #136]	; (80005b4 <SoftSerial_UpdateData+0x114>)
 800052c:	5cd3      	ldrb	r3, [r2, r3]
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	2b00      	cmp	r3, #0
 8000534:	d11f      	bne.n	8000576 <SoftSerial_UpdateData+0xd6>
		if (!(softSerial.RxStat[i] & StatHILOW)) {
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	4a1e      	ldr	r2, [pc, #120]	; (80005b4 <SoftSerial_UpdateData+0x114>)
 800053a:	5cd3      	ldrb	r3, [r2, r3]
 800053c:	f003 0301 	and.w	r3, r3, #1
 8000540:	2b00      	cmp	r3, #0
 8000542:	d132      	bne.n	80005aa <SoftSerial_UpdateData+0x10a>
			softSerial.RxStat[i] |= StatBusy;
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	4a1b      	ldr	r2, [pc, #108]	; (80005b4 <SoftSerial_UpdateData+0x114>)
 8000548:	5cd2      	ldrb	r2, [r2, r3]
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	f042 0202 	orr.w	r2, r2, #2
 8000550:	b2d1      	uxtb	r1, r2
 8000552:	4a18      	ldr	r2, [pc, #96]	; (80005b4 <SoftSerial_UpdateData+0x114>)
 8000554:	54d1      	strb	r1, [r2, r3]
			softSerial.RxBit[i] = 0;
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	4a16      	ldr	r2, [pc, #88]	; (80005b4 <SoftSerial_UpdateData+0x114>)
 800055a:	4413      	add	r3, r2
 800055c:	2200      	movs	r2, #0
 800055e:	709a      	strb	r2, [r3, #2]
			softSerial.RxChbuf[i] = 0;
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	4a14      	ldr	r2, [pc, #80]	; (80005b4 <SoftSerial_UpdateData+0x114>)
 8000564:	3364      	adds	r3, #100	; 0x64
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	4413      	add	r3, r2
 800056a:	2200      	movs	r2, #0
 800056c:	809a      	strh	r2, [r3, #4]
			index = 0;
 800056e:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <SoftSerial_UpdateData+0x118>)
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
		}
	} else if (softSerial.RxStat[i] & StatBusy) {
		int t = softSerial.RxTime[i] / softSerial.RxBitTime;
		SoftSerial_MakeData(i, t);
	}
}
 8000574:	e019      	b.n	80005aa <SoftSerial_UpdateData+0x10a>
	} else if (softSerial.RxStat[i] & StatBusy) {
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <SoftSerial_UpdateData+0x114>)
 800057a:	5cd3      	ldrb	r3, [r2, r3]
 800057c:	f003 0302 	and.w	r3, r3, #2
 8000580:	2b00      	cmp	r3, #0
 8000582:	d012      	beq.n	80005aa <SoftSerial_UpdateData+0x10a>
		int t = softSerial.RxTime[i] / softSerial.RxBitTime;
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	4a0b      	ldr	r2, [pc, #44]	; (80005b4 <SoftSerial_UpdateData+0x114>)
 8000588:	3370      	adds	r3, #112	; 0x70
 800058a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <SoftSerial_UpdateData+0x114>)
 8000590:	f8b3 30e2 	ldrh.w	r3, [r3, #226]	; 0xe2
 8000594:	fbb2 f3f3 	udiv	r3, r2, r3
 8000598:	b29b      	uxth	r3, r3
 800059a:	60fb      	str	r3, [r7, #12]
		SoftSerial_MakeData(i, t);
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	b2da      	uxtb	r2, r3
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	4611      	mov	r1, r2
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 f80b 	bl	80005c0 <SoftSerial_MakeData>
}
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200000a0 	.word	0x200000a0
 80005b8:	20000094 	.word	0x20000094
 80005bc:	20000034 	.word	0x20000034

080005c0 <SoftSerial_MakeData>:

void SoftSerial_MakeData(uint8_t i, uint8_t t) {
 80005c0:	b490      	push	{r4, r7}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	460a      	mov	r2, r1
 80005ca:	71fb      	strb	r3, [r7, #7]
 80005cc:	4613      	mov	r3, r2
 80005ce:	71bb      	strb	r3, [r7, #6]
	static char lastb = 0;
	char b = !(softSerial.RxStat[i] & StatHILOW);
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	4a4b      	ldr	r2, [pc, #300]	; (8000700 <SoftSerial_MakeData+0x140>)
 80005d4:	5cd3      	ldrb	r3, [r2, r3]
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	2b00      	cmp	r3, #0
 80005dc:	bf0c      	ite	eq
 80005de:	2301      	moveq	r3, #1
 80005e0:	2300      	movne	r3, #0
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	73fb      	strb	r3, [r7, #15]

	if (t == 255) {
 80005e6:	79bb      	ldrb	r3, [r7, #6]
 80005e8:	2bff      	cmp	r3, #255	; 0xff
 80005ea:	d10e      	bne.n	800060a <SoftSerial_MakeData+0x4a>
		t = 9 - softSerial.RxBit[i];
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	4a44      	ldr	r2, [pc, #272]	; (8000700 <SoftSerial_MakeData+0x140>)
 80005f0:	4413      	add	r3, r2
 80005f2:	789b      	ldrb	r3, [r3, #2]
 80005f4:	f1c3 0309 	rsb	r3, r3, #9
 80005f8:	71bb      	strb	r3, [r7, #6]
		b = !lastb;
 80005fa:	4b42      	ldr	r3, [pc, #264]	; (8000704 <SoftSerial_MakeData+0x144>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	bf0c      	ite	eq
 8000602:	2301      	moveq	r3, #1
 8000604:	2300      	movne	r3, #0
 8000606:	b2db      	uxtb	r3, r3
 8000608:	73fb      	strb	r3, [r7, #15]
	}

	if (b) {
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d025      	beq.n	800065c <SoftSerial_MakeData+0x9c>
		for (int a = 0; a < t; a++)
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	e01e      	b.n	8000654 <SoftSerial_MakeData+0x94>
			softSerial.RxChbuf[i] |= 1 << (softSerial.RxBit[i] + a);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	4a39      	ldr	r2, [pc, #228]	; (8000700 <SoftSerial_MakeData+0x140>)
 800061a:	3364      	adds	r3, #100	; 0x64
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	4413      	add	r3, r2
 8000620:	889b      	ldrh	r3, [r3, #4]
 8000622:	b21a      	sxth	r2, r3
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	4936      	ldr	r1, [pc, #216]	; (8000700 <SoftSerial_MakeData+0x140>)
 8000628:	440b      	add	r3, r1
 800062a:	789b      	ldrb	r3, [r3, #2]
 800062c:	4619      	mov	r1, r3
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	440b      	add	r3, r1
 8000632:	2101      	movs	r1, #1
 8000634:	fa01 f303 	lsl.w	r3, r1, r3
 8000638:	b21b      	sxth	r3, r3
 800063a:	4313      	orrs	r3, r2
 800063c:	b21a      	sxth	r2, r3
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	b291      	uxth	r1, r2
 8000642:	4a2f      	ldr	r2, [pc, #188]	; (8000700 <SoftSerial_MakeData+0x140>)
 8000644:	3364      	adds	r3, #100	; 0x64
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	4413      	add	r3, r2
 800064a:	460a      	mov	r2, r1
 800064c:	809a      	strh	r2, [r3, #4]
		for (int a = 0; a < t; a++)
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	3301      	adds	r3, #1
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	79bb      	ldrb	r3, [r7, #6]
 8000656:	68ba      	ldr	r2, [r7, #8]
 8000658:	429a      	cmp	r2, r3
 800065a:	dbdc      	blt.n	8000616 <SoftSerial_MakeData+0x56>
	}
	lastb = b;
 800065c:	4a29      	ldr	r2, [pc, #164]	; (8000704 <SoftSerial_MakeData+0x144>)
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	7013      	strb	r3, [r2, #0]
	softSerial.RxBit[i] += t;
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	4a26      	ldr	r2, [pc, #152]	; (8000700 <SoftSerial_MakeData+0x140>)
 8000666:	4413      	add	r3, r2
 8000668:	7899      	ldrb	r1, [r3, #2]
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	79ba      	ldrb	r2, [r7, #6]
 800066e:	440a      	add	r2, r1
 8000670:	b2d1      	uxtb	r1, r2
 8000672:	4a23      	ldr	r2, [pc, #140]	; (8000700 <SoftSerial_MakeData+0x140>)
 8000674:	4413      	add	r3, r2
 8000676:	460a      	mov	r2, r1
 8000678:	709a      	strb	r2, [r3, #2]

	if (softSerial.RxBit[i] >= 9) {
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	4a20      	ldr	r2, [pc, #128]	; (8000700 <SoftSerial_MakeData+0x140>)
 800067e:	4413      	add	r3, r2
 8000680:	789b      	ldrb	r3, [r3, #2]
 8000682:	2b08      	cmp	r3, #8
 8000684:	d936      	bls.n	80006f4 <SoftSerial_MakeData+0x134>
		softSerial.RxCh[i] = softSerial.RxChbuf[i] >> 1;
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	4a1d      	ldr	r2, [pc, #116]	; (8000700 <SoftSerial_MakeData+0x140>)
 800068a:	3364      	adds	r3, #100	; 0x64
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	4413      	add	r3, r2
 8000690:	889b      	ldrh	r3, [r3, #4]
 8000692:	085b      	lsrs	r3, r3, #1
 8000694:	b29a      	uxth	r2, r3
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	b2d1      	uxtb	r1, r2
 800069a:	4a19      	ldr	r2, [pc, #100]	; (8000700 <SoftSerial_MakeData+0x140>)
 800069c:	4413      	add	r3, r2
 800069e:	460a      	mov	r2, r1
 80006a0:	705a      	strb	r2, [r3, #1]
		softSerial.RxStat[i] &= ~StatBusy;
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	4a16      	ldr	r2, [pc, #88]	; (8000700 <SoftSerial_MakeData+0x140>)
 80006a6:	5cd2      	ldrb	r2, [r2, r3]
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	f022 0202 	bic.w	r2, r2, #2
 80006ae:	b2d1      	uxtb	r1, r2
 80006b0:	4a13      	ldr	r2, [pc, #76]	; (8000700 <SoftSerial_MakeData+0x140>)
 80006b2:	54d1      	strb	r1, [r2, r3]

		softSerial.RxData[i][softSerial.RxIndex++] = softSerial.RxCh[i];
 80006b4:	79f9      	ldrb	r1, [r7, #7]
 80006b6:	79fa      	ldrb	r2, [r7, #7]
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SoftSerial_MakeData+0x140>)
 80006ba:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 80006be:	1c58      	adds	r0, r3, #1
 80006c0:	b2c4      	uxtb	r4, r0
 80006c2:	480f      	ldr	r0, [pc, #60]	; (8000700 <SoftSerial_MakeData+0x140>)
 80006c4:	f880 40cb 	strb.w	r4, [r0, #203]	; 0xcb
 80006c8:	461c      	mov	r4, r3
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <SoftSerial_MakeData+0x140>)
 80006cc:	440b      	add	r3, r1
 80006ce:	7858      	ldrb	r0, [r3, #1]
 80006d0:	490b      	ldr	r1, [pc, #44]	; (8000700 <SoftSerial_MakeData+0x140>)
 80006d2:	23c8      	movs	r3, #200	; 0xc8
 80006d4:	fb03 f302 	mul.w	r3, r3, r2
 80006d8:	440b      	add	r3, r1
 80006da:	4423      	add	r3, r4
 80006dc:	3303      	adds	r3, #3
 80006de:	4602      	mov	r2, r0
 80006e0:	701a      	strb	r2, [r3, #0]
		if (softSerial.RxIndex >= SoftSerial_MaxBufer)
 80006e2:	4b07      	ldr	r3, [pc, #28]	; (8000700 <SoftSerial_MakeData+0x140>)
 80006e4:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 80006e8:	2bc7      	cmp	r3, #199	; 0xc7
 80006ea:	d903      	bls.n	80006f4 <SoftSerial_MakeData+0x134>
			softSerial.RxIndex = 0;
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <SoftSerial_MakeData+0x140>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	}
}
 80006f4:	bf00      	nop
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc90      	pop	{r4, r7}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	200000a0 	.word	0x200000a0
 8000704:	20000098 	.word	0x20000098

08000708 <SoftSerial_Init>:

void SoftSerial_Init() {
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0

	SoftSerial_Timer->DIER |= TIM_DIER_UIE;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <SoftSerial_Init+0x4c>)
 8000710:	68db      	ldr	r3, [r3, #12]
 8000712:	4a10      	ldr	r2, [pc, #64]	; (8000754 <SoftSerial_Init+0x4c>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	60d3      	str	r3, [r2, #12]
	SoftSerial_Timer->CR1 |= TIM_CR1_CEN;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <SoftSerial_Init+0x4c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a0d      	ldr	r2, [pc, #52]	; (8000754 <SoftSerial_Init+0x4c>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6013      	str	r3, [r2, #0]

	softSerial.RxBitTime = (1000000 / (SoftSerial_Bund * SoftSerial_Timer_Invterval_us));
 8000726:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <SoftSerial_Init+0x50>)
 8000728:	2253      	movs	r2, #83	; 0x53
 800072a:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
	for (int i = 0; i < SoftSerial_Max; i++) {
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	e007      	b.n	8000744 <SoftSerial_Init+0x3c>
		SoftSerial_UpdateTime(i);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	b2db      	uxtb	r3, r3
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff fe2b 	bl	8000394 <SoftSerial_UpdateTime>
	for (int i = 0; i < SoftSerial_Max; i++) {
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	3301      	adds	r3, #1
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2b00      	cmp	r3, #0
 8000748:	ddf4      	ble.n	8000734 <SoftSerial_Init+0x2c>
	}
}
 800074a:	bf00      	nop
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40012c00 	.word	0x40012c00
 8000758:	200000a0 	.word	0x200000a0

0800075c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000760:	f000 fb32 	bl	8000dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000764:	f000 f818 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000768:	f000 f94c 	bl	8000a04 <MX_GPIO_Init>
  MX_DMA_Init();
 800076c:	f000 f92c 	bl	80009c8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000770:	f000 f870 	bl	8000854 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000774:	f000 f8ac 	bl	80008d0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000778:	f000 f8fc 	bl	8000974 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SoftSerial_Init();
 800077c:	f7ff ffc4 	bl	8000708 <SoftSerial_Init>
  while (1)
  {
	  HAL_UART_Transmit(&huart1, "salam", 5, 100);
 8000780:	2364      	movs	r3, #100	; 0x64
 8000782:	2205      	movs	r2, #5
 8000784:	4902      	ldr	r1, [pc, #8]	; (8000790 <main+0x34>)
 8000786:	4803      	ldr	r0, [pc, #12]	; (8000794 <main+0x38>)
 8000788:	f002 faa7 	bl	8002cda <HAL_UART_Transmit>
 800078c:	e7f8      	b.n	8000780 <main+0x24>
 800078e:	bf00      	nop
 8000790:	08003020 	.word	0x08003020
 8000794:	200001b8 	.word	0x200001b8

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b096      	sub	sp, #88	; 0x58
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007a2:	2228      	movs	r2, #40	; 0x28
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f002 fc26 	bl	8002ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]
 80007ca:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007cc:	2301      	movs	r3, #1
 80007ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007da:	2301      	movs	r3, #1
 80007dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007de:	2302      	movs	r3, #2
 80007e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80007e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80007ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 fac2 	bl	8001d7c <HAL_RCC_OscConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80007fe:	f000 f959 	bl	8000ab4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000802:	230f      	movs	r3, #15
 8000804:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000806:	2302      	movs	r3, #2
 8000808:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800080e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	2102      	movs	r1, #2
 800081e:	4618      	mov	r0, r3
 8000820:	f001 fd2c 	bl	800227c <HAL_RCC_ClockConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800082a:	f000 f943 	bl	8000ab4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800082e:	2302      	movs	r3, #2
 8000830:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000836:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	4618      	mov	r0, r3
 800083c:	f001 feba 	bl	80025b4 <HAL_RCCEx_PeriphCLKConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000846:	f000 f935 	bl	8000ab4 <Error_Handler>
  }
}
 800084a:	bf00      	nop
 800084c:	3758      	adds	r7, #88	; 0x58
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_ADC1_Init+0x74>)
 8000866:	4a19      	ldr	r2, [pc, #100]	; (80008cc <MX_ADC1_Init+0x78>)
 8000868:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <MX_ADC1_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_ADC1_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_ADC1_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_ADC1_Init+0x74>)
 800087e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000882:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000884:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_ADC1_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_ADC1_Init+0x74>)
 800088c:	2201      	movs	r2, #1
 800088e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000890:	480d      	ldr	r0, [pc, #52]	; (80008c8 <MX_ADC1_Init+0x74>)
 8000892:	f000 fafb 	bl	8000e8c <HAL_ADC_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800089c:	f000 f90a 	bl	8000ab4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80008a0:	2306      	movs	r3, #6
 80008a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008a4:	2301      	movs	r3, #1
 80008a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_ADC1_Init+0x74>)
 80008b2:	f000 fbd5 	bl	8001060 <HAL_ADC_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80008bc:	f000 f8fa 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000188 	.word	0x20000188
 80008cc:	40012400 	.word	0x40012400

080008d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e4:	463b      	mov	r3, r7
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008ec:	4b1f      	ldr	r3, [pc, #124]	; (800096c <MX_TIM1_Init+0x9c>)
 80008ee:	4a20      	ldr	r2, [pc, #128]	; (8000970 <MX_TIM1_Init+0xa0>)
 80008f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 719;
 80008f2:	4b1e      	ldr	r3, [pc, #120]	; (800096c <MX_TIM1_Init+0x9c>)
 80008f4:	f240 22cf 	movw	r2, #719	; 0x2cf
 80008f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fa:	4b1c      	ldr	r3, [pc, #112]	; (800096c <MX_TIM1_Init+0x9c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000900:	4b1a      	ldr	r3, [pc, #104]	; (800096c <MX_TIM1_Init+0x9c>)
 8000902:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000906:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000908:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_TIM1_Init+0x9c>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_TIM1_Init+0x9c>)
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_TIM1_Init+0x9c>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800091a:	4814      	ldr	r0, [pc, #80]	; (800096c <MX_TIM1_Init+0x9c>)
 800091c:	f001 ff00 	bl	8002720 <HAL_TIM_Base_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000926:	f000 f8c5 	bl	8000ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800092a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000930:	f107 0308 	add.w	r3, r7, #8
 8000934:	4619      	mov	r1, r3
 8000936:	480d      	ldr	r0, [pc, #52]	; (800096c <MX_TIM1_Init+0x9c>)
 8000938:	f001 ff41 	bl	80027be <HAL_TIM_ConfigClockSource>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000942:	f000 f8b7 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800094e:	463b      	mov	r3, r7
 8000950:	4619      	mov	r1, r3
 8000952:	4806      	ldr	r0, [pc, #24]	; (800096c <MX_TIM1_Init+0x9c>)
 8000954:	f002 f908 	bl	8002b68 <HAL_TIMEx_MasterConfigSynchronization>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800095e:	f000 f8a9 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	3718      	adds	r7, #24
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000240 	.word	0x20000240
 8000970:	40012c00 	.word	0x40012c00

08000974 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <MX_USART1_UART_Init+0x50>)
 800097c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1200;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 8000980:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000984:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_USART1_UART_Init+0x4c>)
 80009ac:	f002 f948 	bl	8002c40 <HAL_UART_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009b6:	f000 f87d 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200001b8 	.word	0x200001b8
 80009c4:	40013800 	.word	0x40013800

080009c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ce:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_DMA_Init+0x38>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	4a0b      	ldr	r2, [pc, #44]	; (8000a00 <MX_DMA_Init+0x38>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6153      	str	r3, [r2, #20]
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_DMA_Init+0x38>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2100      	movs	r1, #0
 80009ea:	200b      	movs	r0, #11
 80009ec:	f000 fd49 	bl	8001482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009f0:	200b      	movs	r0, #11
 80009f2:	f000 fd62 	bl	80014ba <HAL_NVIC_EnableIRQ>

}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40021000 	.word	0x40021000

08000a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	f107 0310 	add.w	r3, r7, #16
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a18:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <MX_GPIO_Init+0xa4>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a22      	ldr	r2, [pc, #136]	; (8000aa8 <MX_GPIO_Init+0xa4>)
 8000a1e:	f043 0320 	orr.w	r3, r3, #32
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <MX_GPIO_Init+0xa4>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0320 	and.w	r3, r3, #32
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a30:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <MX_GPIO_Init+0xa4>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a1c      	ldr	r2, [pc, #112]	; (8000aa8 <MX_GPIO_Init+0xa4>)
 8000a36:	f043 0304 	orr.w	r3, r3, #4
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_GPIO_Init+0xa4>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f003 0304 	and.w	r3, r3, #4
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <MX_GPIO_Init+0xa4>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a16      	ldr	r2, [pc, #88]	; (8000aa8 <MX_GPIO_Init+0xa4>)
 8000a4e:	f043 0310 	orr.w	r3, r3, #16
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_GPIO_Init+0xa4>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f003 0310 	and.w	r3, r3, #16
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_GPIO_Init+0xa4>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a10      	ldr	r2, [pc, #64]	; (8000aa8 <MX_GPIO_Init+0xa4>)
 8000a66:	f043 0308 	orr.w	r3, r3, #8
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_GPIO_Init+0xa4>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0308 	and.w	r3, r3, #8
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a7c:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_GPIO_Init+0xa8>)
 8000a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <MX_GPIO_Init+0xac>)
 8000a8c:	f000 ffe2 	bl	8001a54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	2017      	movs	r0, #23
 8000a96:	f000 fcf4 	bl	8001482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a9a:	2017      	movs	r0, #23
 8000a9c:	f000 fd0d 	bl	80014ba <HAL_NVIC_EnableIRQ>

}
 8000aa0:	bf00      	nop
 8000aa2:	3720      	adds	r7, #32
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	10310000 	.word	0x10310000
 8000ab0:	40011000 	.word	0x40011000

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	e7fe      	b.n	8000abc <Error_Handler+0x8>
	...

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <HAL_MspInit+0x5c>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <HAL_MspInit+0x5c>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6193      	str	r3, [r2, #24]
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_MspInit+0x5c>)
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <HAL_MspInit+0x5c>)
 8000ae0:	69db      	ldr	r3, [r3, #28]
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <HAL_MspInit+0x5c>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	61d3      	str	r3, [r2, #28]
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <HAL_MspInit+0x5c>)
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <HAL_MspInit+0x60>)
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <HAL_MspInit+0x60>)
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b12:	bf00      	nop
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	40010000 	.word	0x40010000

08000b24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a28      	ldr	r2, [pc, #160]	; (8000be0 <HAL_ADC_MspInit+0xbc>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d149      	bne.n	8000bd8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b44:	4b27      	ldr	r3, [pc, #156]	; (8000be4 <HAL_ADC_MspInit+0xc0>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	4a26      	ldr	r2, [pc, #152]	; (8000be4 <HAL_ADC_MspInit+0xc0>)
 8000b4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b4e:	6193      	str	r3, [r2, #24]
 8000b50:	4b24      	ldr	r3, [pc, #144]	; (8000be4 <HAL_ADC_MspInit+0xc0>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5c:	4b21      	ldr	r3, [pc, #132]	; (8000be4 <HAL_ADC_MspInit+0xc0>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a20      	ldr	r2, [pc, #128]	; (8000be4 <HAL_ADC_MspInit+0xc0>)
 8000b62:	f043 0304 	orr.w	r3, r3, #4
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <HAL_ADC_MspInit+0xc0>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b74:	2340      	movs	r3, #64	; 0x40
 8000b76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	4619      	mov	r1, r3
 8000b82:	4819      	ldr	r0, [pc, #100]	; (8000be8 <HAL_ADC_MspInit+0xc4>)
 8000b84:	f000 ff66 	bl	8001a54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <HAL_ADC_MspInit+0xc8>)
 8000b8a:	4a19      	ldr	r2, [pc, #100]	; (8000bf0 <HAL_ADC_MspInit+0xcc>)
 8000b8c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <HAL_ADC_MspInit+0xc8>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b94:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_ADC_MspInit+0xc8>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <HAL_ADC_MspInit+0xc8>)
 8000b9c:	2280      	movs	r2, #128	; 0x80
 8000b9e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_ADC_MspInit+0xc8>)
 8000ba2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ba6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ba8:	4b10      	ldr	r3, [pc, #64]	; (8000bec <HAL_ADC_MspInit+0xc8>)
 8000baa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <HAL_ADC_MspInit+0xc8>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <HAL_ADC_MspInit+0xc8>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bbc:	480b      	ldr	r0, [pc, #44]	; (8000bec <HAL_ADC_MspInit+0xc8>)
 8000bbe:	f000 fc97 	bl	80014f0 <HAL_DMA_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000bc8:	f7ff ff74 	bl	8000ab4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a07      	ldr	r2, [pc, #28]	; (8000bec <HAL_ADC_MspInit+0xc8>)
 8000bd0:	621a      	str	r2, [r3, #32]
 8000bd2:	4a06      	ldr	r2, [pc, #24]	; (8000bec <HAL_ADC_MspInit+0xc8>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bd8:	bf00      	nop
 8000bda:	3720      	adds	r7, #32
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40012400 	.word	0x40012400
 8000be4:	40021000 	.word	0x40021000
 8000be8:	40010800 	.word	0x40010800
 8000bec:	200001fc 	.word	0x200001fc
 8000bf0:	40020008 	.word	0x40020008

08000bf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <HAL_TIM_Base_MspInit+0x44>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d113      	bne.n	8000c2e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <HAL_TIM_Base_MspInit+0x48>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	4a0c      	ldr	r2, [pc, #48]	; (8000c3c <HAL_TIM_Base_MspInit+0x48>)
 8000c0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c10:	6193      	str	r3, [r2, #24]
 8000c12:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <HAL_TIM_Base_MspInit+0x48>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	2019      	movs	r0, #25
 8000c24:	f000 fc2d 	bl	8001482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000c28:	2019      	movs	r0, #25
 8000c2a:	f000 fc46 	bl	80014ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40012c00 	.word	0x40012c00
 8000c3c:	40021000 	.word	0x40021000

08000c40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a22      	ldr	r2, [pc, #136]	; (8000ce4 <HAL_UART_MspInit+0xa4>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d13d      	bne.n	8000cdc <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c60:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <HAL_UART_MspInit+0xa8>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	4a20      	ldr	r2, [pc, #128]	; (8000ce8 <HAL_UART_MspInit+0xa8>)
 8000c66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6a:	6193      	str	r3, [r2, #24]
 8000c6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <HAL_UART_MspInit+0xa8>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <HAL_UART_MspInit+0xa8>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	4a1a      	ldr	r2, [pc, #104]	; (8000ce8 <HAL_UART_MspInit+0xa8>)
 8000c7e:	f043 0308 	orr.w	r3, r3, #8
 8000c82:	6193      	str	r3, [r2, #24]
 8000c84:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <HAL_UART_MspInit+0xa8>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	f003 0308 	and.w	r3, r3, #8
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c90:	2340      	movs	r3, #64	; 0x40
 8000c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4812      	ldr	r0, [pc, #72]	; (8000cec <HAL_UART_MspInit+0xac>)
 8000ca4:	f000 fed6 	bl	8001a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480c      	ldr	r0, [pc, #48]	; (8000cec <HAL_UART_MspInit+0xac>)
 8000cbc:	f000 feca 	bl	8001a54 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_UART_MspInit+0xb0>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8000cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8000cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd0:	f043 0304 	orr.w	r3, r3, #4
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8000cd6:	4a06      	ldr	r2, [pc, #24]	; (8000cf0 <HAL_UART_MspInit+0xb0>)
 8000cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cda:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cdc:	bf00      	nop
 8000cde:	3728      	adds	r7, #40	; 0x28
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40013800 	.word	0x40013800
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40010c00 	.word	0x40010c00
 8000cf0:	40010000 	.word	0x40010000

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <HardFault_Handler+0x4>

08000d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <MemManage_Handler+0x4>

08000d06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <BusFault_Handler+0x4>

08000d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <UsageFault_Handler+0x4>

08000d12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr

08000d1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr

08000d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr

08000d36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3a:	f000 f88b 	bl	8000e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <DMA1_Channel1_IRQHandler+0x10>)
 8000d4a:	f000 fc47 	bl	80015dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	200001fc 	.word	0x200001fc

08000d58 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	SoftSerial_GPIOCallBack();
 8000d5c:	f7ff fa62 	bl	8000224 <SoftSerial_GPIOCallBack>
	return;
 8000d60:	bf00      	nop
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	SoftSerial_TimerCallBack();
 8000d68:	f7ff fa8e 	bl	8000288 <SoftSerial_TimerCallBack>
	return;
 8000d6c:	bf00      	nop
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d7c:	480c      	ldr	r0, [pc, #48]	; (8000db0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d7e:	490d      	ldr	r1, [pc, #52]	; (8000db4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d80:	4a0d      	ldr	r2, [pc, #52]	; (8000db8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d84:	e002      	b.n	8000d8c <LoopCopyDataInit>

08000d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8a:	3304      	adds	r3, #4

08000d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d90:	d3f9      	bcc.n	8000d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d92:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d94:	4c0a      	ldr	r4, [pc, #40]	; (8000dc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d98:	e001      	b.n	8000d9e <LoopFillZerobss>

08000d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d9c:	3204      	adds	r2, #4

08000d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da0:	d3fb      	bcc.n	8000d9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000da2:	f7ff ffe5 	bl	8000d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000da6:	f002 f903 	bl	8002fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000daa:	f7ff fcd7 	bl	800075c <main>
  bx lr
 8000dae:	4770      	bx	lr
  ldr r0, =_sdata
 8000db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000db8:	08003058 	.word	0x08003058
  ldr r2, =_sbss
 8000dbc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000dc0:	2000028c 	.word	0x2000028c

08000dc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dc4:	e7fe      	b.n	8000dc4 <ADC1_2_IRQHandler>
	...

08000dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <HAL_Init+0x28>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <HAL_Init+0x28>)
 8000dd2:	f043 0310 	orr.w	r3, r3, #16
 8000dd6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f000 fb47 	bl	800146c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dde:	200f      	movs	r0, #15
 8000de0:	f000 f808 	bl	8000df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de4:	f7ff fe6c 	bl	8000ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40022000 	.word	0x40022000

08000df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_InitTick+0x54>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <HAL_InitTick+0x58>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4619      	mov	r1, r3
 8000e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 fb5f 	bl	80014d6 <HAL_SYSTICK_Config>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e00e      	b.n	8000e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b0f      	cmp	r3, #15
 8000e26:	d80a      	bhi.n	8000e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e30:	f000 fb27 	bl	8001482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e34:	4a06      	ldr	r2, [pc, #24]	; (8000e50 <HAL_InitTick+0x5c>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e000      	b.n	8000e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	20000010 	.word	0x20000010
 8000e50:	2000000c 	.word	0x2000000c

08000e54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <HAL_IncTick+0x1c>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <HAL_IncTick+0x20>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	4a03      	ldr	r2, [pc, #12]	; (8000e74 <HAL_IncTick+0x20>)
 8000e66:	6013      	str	r3, [r2, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	20000010 	.word	0x20000010
 8000e74:	20000288 	.word	0x20000288

08000e78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e7c:	4b02      	ldr	r3, [pc, #8]	; (8000e88 <HAL_GetTick+0x10>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	20000288 	.word	0x20000288

08000e8c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d101      	bne.n	8000eae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e0ce      	b.n	800104c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d109      	bne.n	8000ed0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff fe2a 	bl	8000b24 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f000 f9bd 	bl	8001250 <ADC_ConversionStop_Disable>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ede:	f003 0310 	and.w	r3, r3, #16
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f040 80a9 	bne.w	800103a <HAL_ADC_Init+0x1ae>
 8000ee8:	7dfb      	ldrb	r3, [r7, #23]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f040 80a5 	bne.w	800103a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ef8:	f023 0302 	bic.w	r3, r3, #2
 8000efc:	f043 0202 	orr.w	r2, r3, #2
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4951      	ldr	r1, [pc, #324]	; (8001054 <HAL_ADC_Init+0x1c8>)
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d10a      	bne.n	8000f28 <HAL_ADC_Init+0x9c>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000f1a:	d002      	beq.n	8000f22 <HAL_ADC_Init+0x96>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	69db      	ldr	r3, [r3, #28]
 8000f20:	e004      	b.n	8000f2c <HAL_ADC_Init+0xa0>
 8000f22:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000f26:	e001      	b.n	8000f2c <HAL_ADC_Init+0xa0>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f2c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	7b1b      	ldrb	r3, [r3, #12]
 8000f32:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f34:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f44:	d003      	beq.n	8000f4e <HAL_ADC_Init+0xc2>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d102      	bne.n	8000f54 <HAL_ADC_Init+0xc8>
 8000f4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f52:	e000      	b.n	8000f56 <HAL_ADC_Init+0xca>
 8000f54:	2300      	movs	r3, #0
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	7d1b      	ldrb	r3, [r3, #20]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d119      	bne.n	8000f98 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	7b1b      	ldrb	r3, [r3, #12]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d109      	bne.n	8000f80 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	035a      	lsls	r2, r3, #13
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	e00b      	b.n	8000f98 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f84:	f043 0220 	orr.w	r2, r3, #32
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f90:	f043 0201 	orr.w	r2, r3, #1
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	4b29      	ldr	r3, [pc, #164]	; (8001058 <HAL_ADC_Init+0x1cc>)
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	6812      	ldr	r2, [r2, #0]
 8000fba:	68b9      	ldr	r1, [r7, #8]
 8000fbc:	430b      	orrs	r3, r1
 8000fbe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fc8:	d003      	beq.n	8000fd2 <HAL_ADC_Init+0x146>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d104      	bne.n	8000fdc <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	051b      	lsls	r3, r3, #20
 8000fda:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	430a      	orrs	r2, r1
 8000fee:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	4b19      	ldr	r3, [pc, #100]	; (800105c <HAL_ADC_Init+0x1d0>)
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d10b      	bne.n	8001018 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100a:	f023 0303 	bic.w	r3, r3, #3
 800100e:	f043 0201 	orr.w	r2, r3, #1
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001016:	e018      	b.n	800104a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101c:	f023 0312 	bic.w	r3, r3, #18
 8001020:	f043 0210 	orr.w	r2, r3, #16
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102c:	f043 0201 	orr.w	r2, r3, #1
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001038:	e007      	b.n	800104a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103e:	f043 0210 	orr.w	r2, r3, #16
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800104a:	7dfb      	ldrb	r3, [r7, #23]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40013c00 	.word	0x40013c00
 8001058:	ffe1f7fd 	.word	0xffe1f7fd
 800105c:	ff1f0efe 	.word	0xff1f0efe

08001060 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800106a:	2300      	movs	r3, #0
 800106c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001078:	2b01      	cmp	r3, #1
 800107a:	d101      	bne.n	8001080 <HAL_ADC_ConfigChannel+0x20>
 800107c:	2302      	movs	r3, #2
 800107e:	e0dc      	b.n	800123a <HAL_ADC_ConfigChannel+0x1da>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2201      	movs	r2, #1
 8001084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b06      	cmp	r3, #6
 800108e:	d81c      	bhi.n	80010ca <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	4613      	mov	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	3b05      	subs	r3, #5
 80010a2:	221f      	movs	r2, #31
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	4019      	ands	r1, r3
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	4613      	mov	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	3b05      	subs	r3, #5
 80010bc:	fa00 f203 	lsl.w	r2, r0, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	430a      	orrs	r2, r1
 80010c6:	635a      	str	r2, [r3, #52]	; 0x34
 80010c8:	e03c      	b.n	8001144 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	2b0c      	cmp	r3, #12
 80010d0:	d81c      	bhi.n	800110c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	4613      	mov	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	3b23      	subs	r3, #35	; 0x23
 80010e4:	221f      	movs	r2, #31
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	4019      	ands	r1, r3
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	6818      	ldr	r0, [r3, #0]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4413      	add	r3, r2
 80010fc:	3b23      	subs	r3, #35	; 0x23
 80010fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	430a      	orrs	r2, r1
 8001108:	631a      	str	r2, [r3, #48]	; 0x30
 800110a:	e01b      	b.n	8001144 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	3b41      	subs	r3, #65	; 0x41
 800111e:	221f      	movs	r2, #31
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	4019      	ands	r1, r3
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	6818      	ldr	r0, [r3, #0]
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	3b41      	subs	r3, #65	; 0x41
 8001138:	fa00 f203 	lsl.w	r2, r0, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	430a      	orrs	r2, r1
 8001142:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b09      	cmp	r3, #9
 800114a:	d91c      	bls.n	8001186 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	68d9      	ldr	r1, [r3, #12]
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	4613      	mov	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4413      	add	r3, r2
 800115c:	3b1e      	subs	r3, #30
 800115e:	2207      	movs	r2, #7
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	4019      	ands	r1, r3
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	6898      	ldr	r0, [r3, #8]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4613      	mov	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4413      	add	r3, r2
 8001176:	3b1e      	subs	r3, #30
 8001178:	fa00 f203 	lsl.w	r2, r0, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	430a      	orrs	r2, r1
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	e019      	b.n	80011ba <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	6919      	ldr	r1, [r3, #16]
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	2207      	movs	r2, #7
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	4019      	ands	r1, r3
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	6898      	ldr	r0, [r3, #8]
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4613      	mov	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4413      	add	r3, r2
 80011ae:	fa00 f203 	lsl.w	r2, r0, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	430a      	orrs	r2, r1
 80011b8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b10      	cmp	r3, #16
 80011c0:	d003      	beq.n	80011ca <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011c6:	2b11      	cmp	r3, #17
 80011c8:	d132      	bne.n	8001230 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a1d      	ldr	r2, [pc, #116]	; (8001244 <HAL_ADC_ConfigChannel+0x1e4>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d125      	bne.n	8001220 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d126      	bne.n	8001230 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80011f0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b10      	cmp	r3, #16
 80011f8:	d11a      	bne.n	8001230 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011fa:	4b13      	ldr	r3, [pc, #76]	; (8001248 <HAL_ADC_ConfigChannel+0x1e8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a13      	ldr	r2, [pc, #76]	; (800124c <HAL_ADC_ConfigChannel+0x1ec>)
 8001200:	fba2 2303 	umull	r2, r3, r2, r3
 8001204:	0c9a      	lsrs	r2, r3, #18
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001210:	e002      	b.n	8001218 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	3b01      	subs	r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f9      	bne.n	8001212 <HAL_ADC_ConfigChannel+0x1b2>
 800121e:	e007      	b.n	8001230 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001224:	f043 0220 	orr.w	r2, r3, #32
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001238:	7bfb      	ldrb	r3, [r7, #15]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr
 8001244:	40012400 	.word	0x40012400
 8001248:	20000008 	.word	0x20000008
 800124c:	431bde83 	.word	0x431bde83

08001250 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b01      	cmp	r3, #1
 8001268:	d12e      	bne.n	80012c8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0201 	bic.w	r2, r2, #1
 8001278:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800127a:	f7ff fdfd 	bl	8000e78 <HAL_GetTick>
 800127e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001280:	e01b      	b.n	80012ba <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001282:	f7ff fdf9 	bl	8000e78 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d914      	bls.n	80012ba <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b01      	cmp	r3, #1
 800129c:	d10d      	bne.n	80012ba <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a2:	f043 0210 	orr.w	r2, r3, #16
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ae:	f043 0201 	orr.w	r2, r3, #1
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e007      	b.n	80012ca <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d0dc      	beq.n	8001282 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f0:	4013      	ands	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001306:	4a04      	ldr	r2, [pc, #16]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	60d3      	str	r3, [r2, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <__NVIC_GetPriorityGrouping+0x18>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	f003 0307 	and.w	r3, r3, #7
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	2b00      	cmp	r3, #0
 8001348:	db0b      	blt.n	8001362 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	f003 021f 	and.w	r2, r3, #31
 8001350:	4906      	ldr	r1, [pc, #24]	; (800136c <__NVIC_EnableIRQ+0x34>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	095b      	lsrs	r3, r3, #5
 8001358:	2001      	movs	r0, #1
 800135a:	fa00 f202 	lsl.w	r2, r0, r2
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	e000e100 	.word	0xe000e100

08001370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	db0a      	blt.n	800139a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	490c      	ldr	r1, [pc, #48]	; (80013bc <__NVIC_SetPriority+0x4c>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	0112      	lsls	r2, r2, #4
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	440b      	add	r3, r1
 8001394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001398:	e00a      	b.n	80013b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4908      	ldr	r1, [pc, #32]	; (80013c0 <__NVIC_SetPriority+0x50>)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	3b04      	subs	r3, #4
 80013a8:	0112      	lsls	r2, r2, #4
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	761a      	strb	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000e100 	.word	0xe000e100
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f1c3 0307 	rsb	r3, r3, #7
 80013de:	2b04      	cmp	r3, #4
 80013e0:	bf28      	it	cs
 80013e2:	2304      	movcs	r3, #4
 80013e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3304      	adds	r3, #4
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d902      	bls.n	80013f4 <NVIC_EncodePriority+0x30>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3b03      	subs	r3, #3
 80013f2:	e000      	b.n	80013f6 <NVIC_EncodePriority+0x32>
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800140c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43d9      	mvns	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	4313      	orrs	r3, r2
         );
}
 800141e:	4618      	mov	r0, r3
 8001420:	3724      	adds	r7, #36	; 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001438:	d301      	bcc.n	800143e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143a:	2301      	movs	r3, #1
 800143c:	e00f      	b.n	800145e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143e:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <SysTick_Config+0x40>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001446:	210f      	movs	r1, #15
 8001448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800144c:	f7ff ff90 	bl	8001370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <SysTick_Config+0x40>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <SysTick_Config+0x40>)
 8001458:	2207      	movs	r2, #7
 800145a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	e000e010 	.word	0xe000e010

0800146c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ff2d 	bl	80012d4 <__NVIC_SetPriorityGrouping>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001482:	b580      	push	{r7, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001494:	f7ff ff42 	bl	800131c <__NVIC_GetPriorityGrouping>
 8001498:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	6978      	ldr	r0, [r7, #20]
 80014a0:	f7ff ff90 	bl	80013c4 <NVIC_EncodePriority>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff5f 	bl	8001370 <__NVIC_SetPriority>
}
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff35 	bl	8001338 <__NVIC_EnableIRQ>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ffa2 	bl	8001428 <SysTick_Config>
 80014e4:	4603      	mov	r3, r0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e059      	b.n	80015ba <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <HAL_DMA_Init+0xd4>)
 800150e:	429a      	cmp	r2, r3
 8001510:	d80f      	bhi.n	8001532 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <HAL_DMA_Init+0xd8>)
 800151a:	4413      	add	r3, r2
 800151c:	4a2b      	ldr	r2, [pc, #172]	; (80015cc <HAL_DMA_Init+0xdc>)
 800151e:	fba2 2303 	umull	r2, r3, r2, r3
 8001522:	091b      	lsrs	r3, r3, #4
 8001524:	009a      	lsls	r2, r3, #2
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a28      	ldr	r2, [pc, #160]	; (80015d0 <HAL_DMA_Init+0xe0>)
 800152e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001530:	e00e      	b.n	8001550 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <HAL_DMA_Init+0xe4>)
 800153a:	4413      	add	r3, r2
 800153c:	4a23      	ldr	r2, [pc, #140]	; (80015cc <HAL_DMA_Init+0xdc>)
 800153e:	fba2 2303 	umull	r2, r3, r2, r3
 8001542:	091b      	lsrs	r3, r3, #4
 8001544:	009a      	lsls	r2, r3, #2
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a22      	ldr	r2, [pc, #136]	; (80015d8 <HAL_DMA_Init+0xe8>)
 800154e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2202      	movs	r2, #2
 8001554:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001566:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800156a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001574:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001580:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800158c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	4313      	orrs	r3, r2
 8001598:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	40020407 	.word	0x40020407
 80015c8:	bffdfff8 	.word	0xbffdfff8
 80015cc:	cccccccd 	.word	0xcccccccd
 80015d0:	40020000 	.word	0x40020000
 80015d4:	bffdfbf8 	.word	0xbffdfbf8
 80015d8:	40020400 	.word	0x40020400

080015dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	2204      	movs	r2, #4
 80015fa:	409a      	lsls	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4013      	ands	r3, r2
 8001600:	2b00      	cmp	r3, #0
 8001602:	f000 80d6 	beq.w	80017b2 <HAL_DMA_IRQHandler+0x1d6>
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 80d0 	beq.w	80017b2 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0320 	and.w	r3, r3, #32
 800161c:	2b00      	cmp	r3, #0
 800161e:	d107      	bne.n	8001630 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 0204 	bic.w	r2, r2, #4
 800162e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	4b9b      	ldr	r3, [pc, #620]	; (80018a4 <HAL_DMA_IRQHandler+0x2c8>)
 8001638:	429a      	cmp	r2, r3
 800163a:	d958      	bls.n	80016ee <HAL_DMA_IRQHandler+0x112>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a99      	ldr	r2, [pc, #612]	; (80018a8 <HAL_DMA_IRQHandler+0x2cc>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d04f      	beq.n	80016e6 <HAL_DMA_IRQHandler+0x10a>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a98      	ldr	r2, [pc, #608]	; (80018ac <HAL_DMA_IRQHandler+0x2d0>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d048      	beq.n	80016e2 <HAL_DMA_IRQHandler+0x106>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a96      	ldr	r2, [pc, #600]	; (80018b0 <HAL_DMA_IRQHandler+0x2d4>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d040      	beq.n	80016dc <HAL_DMA_IRQHandler+0x100>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a95      	ldr	r2, [pc, #596]	; (80018b4 <HAL_DMA_IRQHandler+0x2d8>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d038      	beq.n	80016d6 <HAL_DMA_IRQHandler+0xfa>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a93      	ldr	r2, [pc, #588]	; (80018b8 <HAL_DMA_IRQHandler+0x2dc>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d030      	beq.n	80016d0 <HAL_DMA_IRQHandler+0xf4>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a92      	ldr	r2, [pc, #584]	; (80018bc <HAL_DMA_IRQHandler+0x2e0>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d028      	beq.n	80016ca <HAL_DMA_IRQHandler+0xee>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a89      	ldr	r2, [pc, #548]	; (80018a4 <HAL_DMA_IRQHandler+0x2c8>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d020      	beq.n	80016c4 <HAL_DMA_IRQHandler+0xe8>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a8e      	ldr	r2, [pc, #568]	; (80018c0 <HAL_DMA_IRQHandler+0x2e4>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d019      	beq.n	80016c0 <HAL_DMA_IRQHandler+0xe4>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a8c      	ldr	r2, [pc, #560]	; (80018c4 <HAL_DMA_IRQHandler+0x2e8>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d012      	beq.n	80016bc <HAL_DMA_IRQHandler+0xe0>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a8b      	ldr	r2, [pc, #556]	; (80018c8 <HAL_DMA_IRQHandler+0x2ec>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d00a      	beq.n	80016b6 <HAL_DMA_IRQHandler+0xda>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a89      	ldr	r2, [pc, #548]	; (80018cc <HAL_DMA_IRQHandler+0x2f0>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d102      	bne.n	80016b0 <HAL_DMA_IRQHandler+0xd4>
 80016aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016ae:	e01b      	b.n	80016e8 <HAL_DMA_IRQHandler+0x10c>
 80016b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80016b4:	e018      	b.n	80016e8 <HAL_DMA_IRQHandler+0x10c>
 80016b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ba:	e015      	b.n	80016e8 <HAL_DMA_IRQHandler+0x10c>
 80016bc:	2340      	movs	r3, #64	; 0x40
 80016be:	e013      	b.n	80016e8 <HAL_DMA_IRQHandler+0x10c>
 80016c0:	2304      	movs	r3, #4
 80016c2:	e011      	b.n	80016e8 <HAL_DMA_IRQHandler+0x10c>
 80016c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016c8:	e00e      	b.n	80016e8 <HAL_DMA_IRQHandler+0x10c>
 80016ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016ce:	e00b      	b.n	80016e8 <HAL_DMA_IRQHandler+0x10c>
 80016d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80016d4:	e008      	b.n	80016e8 <HAL_DMA_IRQHandler+0x10c>
 80016d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016da:	e005      	b.n	80016e8 <HAL_DMA_IRQHandler+0x10c>
 80016dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016e0:	e002      	b.n	80016e8 <HAL_DMA_IRQHandler+0x10c>
 80016e2:	2340      	movs	r3, #64	; 0x40
 80016e4:	e000      	b.n	80016e8 <HAL_DMA_IRQHandler+0x10c>
 80016e6:	2304      	movs	r3, #4
 80016e8:	4a79      	ldr	r2, [pc, #484]	; (80018d0 <HAL_DMA_IRQHandler+0x2f4>)
 80016ea:	6053      	str	r3, [r2, #4]
 80016ec:	e057      	b.n	800179e <HAL_DMA_IRQHandler+0x1c2>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a6d      	ldr	r2, [pc, #436]	; (80018a8 <HAL_DMA_IRQHandler+0x2cc>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d04f      	beq.n	8001798 <HAL_DMA_IRQHandler+0x1bc>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a6b      	ldr	r2, [pc, #428]	; (80018ac <HAL_DMA_IRQHandler+0x2d0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d048      	beq.n	8001794 <HAL_DMA_IRQHandler+0x1b8>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a6a      	ldr	r2, [pc, #424]	; (80018b0 <HAL_DMA_IRQHandler+0x2d4>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d040      	beq.n	800178e <HAL_DMA_IRQHandler+0x1b2>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a68      	ldr	r2, [pc, #416]	; (80018b4 <HAL_DMA_IRQHandler+0x2d8>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d038      	beq.n	8001788 <HAL_DMA_IRQHandler+0x1ac>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a67      	ldr	r2, [pc, #412]	; (80018b8 <HAL_DMA_IRQHandler+0x2dc>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d030      	beq.n	8001782 <HAL_DMA_IRQHandler+0x1a6>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a65      	ldr	r2, [pc, #404]	; (80018bc <HAL_DMA_IRQHandler+0x2e0>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d028      	beq.n	800177c <HAL_DMA_IRQHandler+0x1a0>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a5d      	ldr	r2, [pc, #372]	; (80018a4 <HAL_DMA_IRQHandler+0x2c8>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d020      	beq.n	8001776 <HAL_DMA_IRQHandler+0x19a>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a61      	ldr	r2, [pc, #388]	; (80018c0 <HAL_DMA_IRQHandler+0x2e4>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d019      	beq.n	8001772 <HAL_DMA_IRQHandler+0x196>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a60      	ldr	r2, [pc, #384]	; (80018c4 <HAL_DMA_IRQHandler+0x2e8>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d012      	beq.n	800176e <HAL_DMA_IRQHandler+0x192>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a5e      	ldr	r2, [pc, #376]	; (80018c8 <HAL_DMA_IRQHandler+0x2ec>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d00a      	beq.n	8001768 <HAL_DMA_IRQHandler+0x18c>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a5d      	ldr	r2, [pc, #372]	; (80018cc <HAL_DMA_IRQHandler+0x2f0>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d102      	bne.n	8001762 <HAL_DMA_IRQHandler+0x186>
 800175c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001760:	e01b      	b.n	800179a <HAL_DMA_IRQHandler+0x1be>
 8001762:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001766:	e018      	b.n	800179a <HAL_DMA_IRQHandler+0x1be>
 8001768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800176c:	e015      	b.n	800179a <HAL_DMA_IRQHandler+0x1be>
 800176e:	2340      	movs	r3, #64	; 0x40
 8001770:	e013      	b.n	800179a <HAL_DMA_IRQHandler+0x1be>
 8001772:	2304      	movs	r3, #4
 8001774:	e011      	b.n	800179a <HAL_DMA_IRQHandler+0x1be>
 8001776:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800177a:	e00e      	b.n	800179a <HAL_DMA_IRQHandler+0x1be>
 800177c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001780:	e00b      	b.n	800179a <HAL_DMA_IRQHandler+0x1be>
 8001782:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001786:	e008      	b.n	800179a <HAL_DMA_IRQHandler+0x1be>
 8001788:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800178c:	e005      	b.n	800179a <HAL_DMA_IRQHandler+0x1be>
 800178e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001792:	e002      	b.n	800179a <HAL_DMA_IRQHandler+0x1be>
 8001794:	2340      	movs	r3, #64	; 0x40
 8001796:	e000      	b.n	800179a <HAL_DMA_IRQHandler+0x1be>
 8001798:	2304      	movs	r3, #4
 800179a:	4a4e      	ldr	r2, [pc, #312]	; (80018d4 <HAL_DMA_IRQHandler+0x2f8>)
 800179c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 8136 	beq.w	8001a14 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80017b0:	e130      	b.n	8001a14 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	2202      	movs	r2, #2
 80017b8:	409a      	lsls	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4013      	ands	r3, r2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 80f8 	beq.w	80019b4 <HAL_DMA_IRQHandler+0x3d8>
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 80f2 	beq.w	80019b4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0320 	and.w	r3, r3, #32
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10b      	bne.n	80017f6 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 020a 	bic.w	r2, r2, #10
 80017ec:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	461a      	mov	r2, r3
 80017fc:	4b29      	ldr	r3, [pc, #164]	; (80018a4 <HAL_DMA_IRQHandler+0x2c8>)
 80017fe:	429a      	cmp	r2, r3
 8001800:	d973      	bls.n	80018ea <HAL_DMA_IRQHandler+0x30e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a28      	ldr	r2, [pc, #160]	; (80018a8 <HAL_DMA_IRQHandler+0x2cc>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d06a      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x306>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a26      	ldr	r2, [pc, #152]	; (80018ac <HAL_DMA_IRQHandler+0x2d0>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d063      	beq.n	80018de <HAL_DMA_IRQHandler+0x302>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a25      	ldr	r2, [pc, #148]	; (80018b0 <HAL_DMA_IRQHandler+0x2d4>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d05b      	beq.n	80018d8 <HAL_DMA_IRQHandler+0x2fc>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a23      	ldr	r2, [pc, #140]	; (80018b4 <HAL_DMA_IRQHandler+0x2d8>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d038      	beq.n	800189c <HAL_DMA_IRQHandler+0x2c0>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a22      	ldr	r2, [pc, #136]	; (80018b8 <HAL_DMA_IRQHandler+0x2dc>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d030      	beq.n	8001896 <HAL_DMA_IRQHandler+0x2ba>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a20      	ldr	r2, [pc, #128]	; (80018bc <HAL_DMA_IRQHandler+0x2e0>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d028      	beq.n	8001890 <HAL_DMA_IRQHandler+0x2b4>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a18      	ldr	r2, [pc, #96]	; (80018a4 <HAL_DMA_IRQHandler+0x2c8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d020      	beq.n	800188a <HAL_DMA_IRQHandler+0x2ae>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a1c      	ldr	r2, [pc, #112]	; (80018c0 <HAL_DMA_IRQHandler+0x2e4>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d019      	beq.n	8001886 <HAL_DMA_IRQHandler+0x2aa>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a1b      	ldr	r2, [pc, #108]	; (80018c4 <HAL_DMA_IRQHandler+0x2e8>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d012      	beq.n	8001882 <HAL_DMA_IRQHandler+0x2a6>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a19      	ldr	r2, [pc, #100]	; (80018c8 <HAL_DMA_IRQHandler+0x2ec>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d00a      	beq.n	800187c <HAL_DMA_IRQHandler+0x2a0>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a18      	ldr	r2, [pc, #96]	; (80018cc <HAL_DMA_IRQHandler+0x2f0>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d102      	bne.n	8001876 <HAL_DMA_IRQHandler+0x29a>
 8001870:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001874:	e036      	b.n	80018e4 <HAL_DMA_IRQHandler+0x308>
 8001876:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800187a:	e033      	b.n	80018e4 <HAL_DMA_IRQHandler+0x308>
 800187c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001880:	e030      	b.n	80018e4 <HAL_DMA_IRQHandler+0x308>
 8001882:	2320      	movs	r3, #32
 8001884:	e02e      	b.n	80018e4 <HAL_DMA_IRQHandler+0x308>
 8001886:	2302      	movs	r3, #2
 8001888:	e02c      	b.n	80018e4 <HAL_DMA_IRQHandler+0x308>
 800188a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800188e:	e029      	b.n	80018e4 <HAL_DMA_IRQHandler+0x308>
 8001890:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001894:	e026      	b.n	80018e4 <HAL_DMA_IRQHandler+0x308>
 8001896:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800189a:	e023      	b.n	80018e4 <HAL_DMA_IRQHandler+0x308>
 800189c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a0:	e020      	b.n	80018e4 <HAL_DMA_IRQHandler+0x308>
 80018a2:	bf00      	nop
 80018a4:	40020080 	.word	0x40020080
 80018a8:	40020008 	.word	0x40020008
 80018ac:	4002001c 	.word	0x4002001c
 80018b0:	40020030 	.word	0x40020030
 80018b4:	40020044 	.word	0x40020044
 80018b8:	40020058 	.word	0x40020058
 80018bc:	4002006c 	.word	0x4002006c
 80018c0:	40020408 	.word	0x40020408
 80018c4:	4002041c 	.word	0x4002041c
 80018c8:	40020430 	.word	0x40020430
 80018cc:	40020444 	.word	0x40020444
 80018d0:	40020400 	.word	0x40020400
 80018d4:	40020000 	.word	0x40020000
 80018d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018dc:	e002      	b.n	80018e4 <HAL_DMA_IRQHandler+0x308>
 80018de:	2320      	movs	r3, #32
 80018e0:	e000      	b.n	80018e4 <HAL_DMA_IRQHandler+0x308>
 80018e2:	2302      	movs	r3, #2
 80018e4:	4a4e      	ldr	r2, [pc, #312]	; (8001a20 <HAL_DMA_IRQHandler+0x444>)
 80018e6:	6053      	str	r3, [r2, #4]
 80018e8:	e057      	b.n	800199a <HAL_DMA_IRQHandler+0x3be>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a4d      	ldr	r2, [pc, #308]	; (8001a24 <HAL_DMA_IRQHandler+0x448>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d04f      	beq.n	8001994 <HAL_DMA_IRQHandler+0x3b8>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a4b      	ldr	r2, [pc, #300]	; (8001a28 <HAL_DMA_IRQHandler+0x44c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d048      	beq.n	8001990 <HAL_DMA_IRQHandler+0x3b4>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a4a      	ldr	r2, [pc, #296]	; (8001a2c <HAL_DMA_IRQHandler+0x450>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d040      	beq.n	800198a <HAL_DMA_IRQHandler+0x3ae>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a48      	ldr	r2, [pc, #288]	; (8001a30 <HAL_DMA_IRQHandler+0x454>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d038      	beq.n	8001984 <HAL_DMA_IRQHandler+0x3a8>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a47      	ldr	r2, [pc, #284]	; (8001a34 <HAL_DMA_IRQHandler+0x458>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d030      	beq.n	800197e <HAL_DMA_IRQHandler+0x3a2>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a45      	ldr	r2, [pc, #276]	; (8001a38 <HAL_DMA_IRQHandler+0x45c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d028      	beq.n	8001978 <HAL_DMA_IRQHandler+0x39c>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a44      	ldr	r2, [pc, #272]	; (8001a3c <HAL_DMA_IRQHandler+0x460>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d020      	beq.n	8001972 <HAL_DMA_IRQHandler+0x396>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a42      	ldr	r2, [pc, #264]	; (8001a40 <HAL_DMA_IRQHandler+0x464>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d019      	beq.n	800196e <HAL_DMA_IRQHandler+0x392>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a41      	ldr	r2, [pc, #260]	; (8001a44 <HAL_DMA_IRQHandler+0x468>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d012      	beq.n	800196a <HAL_DMA_IRQHandler+0x38e>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a3f      	ldr	r2, [pc, #252]	; (8001a48 <HAL_DMA_IRQHandler+0x46c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d00a      	beq.n	8001964 <HAL_DMA_IRQHandler+0x388>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a3e      	ldr	r2, [pc, #248]	; (8001a4c <HAL_DMA_IRQHandler+0x470>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d102      	bne.n	800195e <HAL_DMA_IRQHandler+0x382>
 8001958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800195c:	e01b      	b.n	8001996 <HAL_DMA_IRQHandler+0x3ba>
 800195e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001962:	e018      	b.n	8001996 <HAL_DMA_IRQHandler+0x3ba>
 8001964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001968:	e015      	b.n	8001996 <HAL_DMA_IRQHandler+0x3ba>
 800196a:	2320      	movs	r3, #32
 800196c:	e013      	b.n	8001996 <HAL_DMA_IRQHandler+0x3ba>
 800196e:	2302      	movs	r3, #2
 8001970:	e011      	b.n	8001996 <HAL_DMA_IRQHandler+0x3ba>
 8001972:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001976:	e00e      	b.n	8001996 <HAL_DMA_IRQHandler+0x3ba>
 8001978:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800197c:	e00b      	b.n	8001996 <HAL_DMA_IRQHandler+0x3ba>
 800197e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001982:	e008      	b.n	8001996 <HAL_DMA_IRQHandler+0x3ba>
 8001984:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001988:	e005      	b.n	8001996 <HAL_DMA_IRQHandler+0x3ba>
 800198a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800198e:	e002      	b.n	8001996 <HAL_DMA_IRQHandler+0x3ba>
 8001990:	2320      	movs	r3, #32
 8001992:	e000      	b.n	8001996 <HAL_DMA_IRQHandler+0x3ba>
 8001994:	2302      	movs	r3, #2
 8001996:	4a2e      	ldr	r2, [pc, #184]	; (8001a50 <HAL_DMA_IRQHandler+0x474>)
 8001998:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d034      	beq.n	8001a14 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80019b2:	e02f      	b.n	8001a14 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	2208      	movs	r2, #8
 80019ba:	409a      	lsls	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4013      	ands	r3, r2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d028      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x43a>
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d023      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 020e 	bic.w	r2, r2, #14
 80019dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e6:	2101      	movs	r1, #1
 80019e8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d004      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	4798      	blx	r3
    }
  }
  return;
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
}
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40020400 	.word	0x40020400
 8001a24:	40020008 	.word	0x40020008
 8001a28:	4002001c 	.word	0x4002001c
 8001a2c:	40020030 	.word	0x40020030
 8001a30:	40020044 	.word	0x40020044
 8001a34:	40020058 	.word	0x40020058
 8001a38:	4002006c 	.word	0x4002006c
 8001a3c:	40020080 	.word	0x40020080
 8001a40:	40020408 	.word	0x40020408
 8001a44:	4002041c 	.word	0x4002041c
 8001a48:	40020430 	.word	0x40020430
 8001a4c:	40020444 	.word	0x40020444
 8001a50:	40020000 	.word	0x40020000

08001a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b08b      	sub	sp, #44	; 0x2c
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a62:	2300      	movs	r3, #0
 8001a64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a66:	e179      	b.n	8001d5c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a68:	2201      	movs	r2, #1
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	69fa      	ldr	r2, [r7, #28]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	f040 8168 	bne.w	8001d56 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	4aa0      	ldr	r2, [pc, #640]	; (8001d0c <HAL_GPIO_Init+0x2b8>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d05e      	beq.n	8001b4e <HAL_GPIO_Init+0xfa>
 8001a90:	4a9e      	ldr	r2, [pc, #632]	; (8001d0c <HAL_GPIO_Init+0x2b8>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d875      	bhi.n	8001b82 <HAL_GPIO_Init+0x12e>
 8001a96:	4a9e      	ldr	r2, [pc, #632]	; (8001d10 <HAL_GPIO_Init+0x2bc>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d058      	beq.n	8001b4e <HAL_GPIO_Init+0xfa>
 8001a9c:	4a9c      	ldr	r2, [pc, #624]	; (8001d10 <HAL_GPIO_Init+0x2bc>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d86f      	bhi.n	8001b82 <HAL_GPIO_Init+0x12e>
 8001aa2:	4a9c      	ldr	r2, [pc, #624]	; (8001d14 <HAL_GPIO_Init+0x2c0>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d052      	beq.n	8001b4e <HAL_GPIO_Init+0xfa>
 8001aa8:	4a9a      	ldr	r2, [pc, #616]	; (8001d14 <HAL_GPIO_Init+0x2c0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d869      	bhi.n	8001b82 <HAL_GPIO_Init+0x12e>
 8001aae:	4a9a      	ldr	r2, [pc, #616]	; (8001d18 <HAL_GPIO_Init+0x2c4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d04c      	beq.n	8001b4e <HAL_GPIO_Init+0xfa>
 8001ab4:	4a98      	ldr	r2, [pc, #608]	; (8001d18 <HAL_GPIO_Init+0x2c4>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d863      	bhi.n	8001b82 <HAL_GPIO_Init+0x12e>
 8001aba:	4a98      	ldr	r2, [pc, #608]	; (8001d1c <HAL_GPIO_Init+0x2c8>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d046      	beq.n	8001b4e <HAL_GPIO_Init+0xfa>
 8001ac0:	4a96      	ldr	r2, [pc, #600]	; (8001d1c <HAL_GPIO_Init+0x2c8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d85d      	bhi.n	8001b82 <HAL_GPIO_Init+0x12e>
 8001ac6:	2b12      	cmp	r3, #18
 8001ac8:	d82a      	bhi.n	8001b20 <HAL_GPIO_Init+0xcc>
 8001aca:	2b12      	cmp	r3, #18
 8001acc:	d859      	bhi.n	8001b82 <HAL_GPIO_Init+0x12e>
 8001ace:	a201      	add	r2, pc, #4	; (adr r2, 8001ad4 <HAL_GPIO_Init+0x80>)
 8001ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad4:	08001b4f 	.word	0x08001b4f
 8001ad8:	08001b29 	.word	0x08001b29
 8001adc:	08001b3b 	.word	0x08001b3b
 8001ae0:	08001b7d 	.word	0x08001b7d
 8001ae4:	08001b83 	.word	0x08001b83
 8001ae8:	08001b83 	.word	0x08001b83
 8001aec:	08001b83 	.word	0x08001b83
 8001af0:	08001b83 	.word	0x08001b83
 8001af4:	08001b83 	.word	0x08001b83
 8001af8:	08001b83 	.word	0x08001b83
 8001afc:	08001b83 	.word	0x08001b83
 8001b00:	08001b83 	.word	0x08001b83
 8001b04:	08001b83 	.word	0x08001b83
 8001b08:	08001b83 	.word	0x08001b83
 8001b0c:	08001b83 	.word	0x08001b83
 8001b10:	08001b83 	.word	0x08001b83
 8001b14:	08001b83 	.word	0x08001b83
 8001b18:	08001b31 	.word	0x08001b31
 8001b1c:	08001b45 	.word	0x08001b45
 8001b20:	4a7f      	ldr	r2, [pc, #508]	; (8001d20 <HAL_GPIO_Init+0x2cc>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d013      	beq.n	8001b4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b26:	e02c      	b.n	8001b82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	623b      	str	r3, [r7, #32]
          break;
 8001b2e:	e029      	b.n	8001b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	3304      	adds	r3, #4
 8001b36:	623b      	str	r3, [r7, #32]
          break;
 8001b38:	e024      	b.n	8001b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	3308      	adds	r3, #8
 8001b40:	623b      	str	r3, [r7, #32]
          break;
 8001b42:	e01f      	b.n	8001b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	330c      	adds	r3, #12
 8001b4a:	623b      	str	r3, [r7, #32]
          break;
 8001b4c:	e01a      	b.n	8001b84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d102      	bne.n	8001b5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b56:	2304      	movs	r3, #4
 8001b58:	623b      	str	r3, [r7, #32]
          break;
 8001b5a:	e013      	b.n	8001b84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d105      	bne.n	8001b70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b64:	2308      	movs	r3, #8
 8001b66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69fa      	ldr	r2, [r7, #28]
 8001b6c:	611a      	str	r2, [r3, #16]
          break;
 8001b6e:	e009      	b.n	8001b84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b70:	2308      	movs	r3, #8
 8001b72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69fa      	ldr	r2, [r7, #28]
 8001b78:	615a      	str	r2, [r3, #20]
          break;
 8001b7a:	e003      	b.n	8001b84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	623b      	str	r3, [r7, #32]
          break;
 8001b80:	e000      	b.n	8001b84 <HAL_GPIO_Init+0x130>
          break;
 8001b82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	2bff      	cmp	r3, #255	; 0xff
 8001b88:	d801      	bhi.n	8001b8e <HAL_GPIO_Init+0x13a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	e001      	b.n	8001b92 <HAL_GPIO_Init+0x13e>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3304      	adds	r3, #4
 8001b92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	2bff      	cmp	r3, #255	; 0xff
 8001b98:	d802      	bhi.n	8001ba0 <HAL_GPIO_Init+0x14c>
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	e002      	b.n	8001ba6 <HAL_GPIO_Init+0x152>
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	3b08      	subs	r3, #8
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	210f      	movs	r1, #15
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	6a39      	ldr	r1, [r7, #32]
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 80c1 	beq.w	8001d56 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bd4:	4b53      	ldr	r3, [pc, #332]	; (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	4a52      	ldr	r2, [pc, #328]	; (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6193      	str	r3, [r2, #24]
 8001be0:	4b50      	ldr	r3, [pc, #320]	; (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bec:	4a4e      	ldr	r2, [pc, #312]	; (8001d28 <HAL_GPIO_Init+0x2d4>)
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	089b      	lsrs	r3, r3, #2
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	220f      	movs	r2, #15
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a46      	ldr	r2, [pc, #280]	; (8001d2c <HAL_GPIO_Init+0x2d8>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d01f      	beq.n	8001c58 <HAL_GPIO_Init+0x204>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a45      	ldr	r2, [pc, #276]	; (8001d30 <HAL_GPIO_Init+0x2dc>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d019      	beq.n	8001c54 <HAL_GPIO_Init+0x200>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a44      	ldr	r2, [pc, #272]	; (8001d34 <HAL_GPIO_Init+0x2e0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d013      	beq.n	8001c50 <HAL_GPIO_Init+0x1fc>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a43      	ldr	r2, [pc, #268]	; (8001d38 <HAL_GPIO_Init+0x2e4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d00d      	beq.n	8001c4c <HAL_GPIO_Init+0x1f8>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a42      	ldr	r2, [pc, #264]	; (8001d3c <HAL_GPIO_Init+0x2e8>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d007      	beq.n	8001c48 <HAL_GPIO_Init+0x1f4>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a41      	ldr	r2, [pc, #260]	; (8001d40 <HAL_GPIO_Init+0x2ec>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d101      	bne.n	8001c44 <HAL_GPIO_Init+0x1f0>
 8001c40:	2305      	movs	r3, #5
 8001c42:	e00a      	b.n	8001c5a <HAL_GPIO_Init+0x206>
 8001c44:	2306      	movs	r3, #6
 8001c46:	e008      	b.n	8001c5a <HAL_GPIO_Init+0x206>
 8001c48:	2304      	movs	r3, #4
 8001c4a:	e006      	b.n	8001c5a <HAL_GPIO_Init+0x206>
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e004      	b.n	8001c5a <HAL_GPIO_Init+0x206>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e002      	b.n	8001c5a <HAL_GPIO_Init+0x206>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <HAL_GPIO_Init+0x206>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5c:	f002 0203 	and.w	r2, r2, #3
 8001c60:	0092      	lsls	r2, r2, #2
 8001c62:	4093      	lsls	r3, r2
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c6a:	492f      	ldr	r1, [pc, #188]	; (8001d28 <HAL_GPIO_Init+0x2d4>)
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	089b      	lsrs	r3, r3, #2
 8001c70:	3302      	adds	r3, #2
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d006      	beq.n	8001c92 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c84:	4b2f      	ldr	r3, [pc, #188]	; (8001d44 <HAL_GPIO_Init+0x2f0>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	492e      	ldr	r1, [pc, #184]	; (8001d44 <HAL_GPIO_Init+0x2f0>)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	600b      	str	r3, [r1, #0]
 8001c90:	e006      	b.n	8001ca0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c92:	4b2c      	ldr	r3, [pc, #176]	; (8001d44 <HAL_GPIO_Init+0x2f0>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	492a      	ldr	r1, [pc, #168]	; (8001d44 <HAL_GPIO_Init+0x2f0>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d006      	beq.n	8001cba <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cac:	4b25      	ldr	r3, [pc, #148]	; (8001d44 <HAL_GPIO_Init+0x2f0>)
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	4924      	ldr	r1, [pc, #144]	; (8001d44 <HAL_GPIO_Init+0x2f0>)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	604b      	str	r3, [r1, #4]
 8001cb8:	e006      	b.n	8001cc8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cba:	4b22      	ldr	r3, [pc, #136]	; (8001d44 <HAL_GPIO_Init+0x2f0>)
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	4920      	ldr	r1, [pc, #128]	; (8001d44 <HAL_GPIO_Init+0x2f0>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d006      	beq.n	8001ce2 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	; (8001d44 <HAL_GPIO_Init+0x2f0>)
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	491a      	ldr	r1, [pc, #104]	; (8001d44 <HAL_GPIO_Init+0x2f0>)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	608b      	str	r3, [r1, #8]
 8001ce0:	e006      	b.n	8001cf0 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ce2:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <HAL_GPIO_Init+0x2f0>)
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	4916      	ldr	r1, [pc, #88]	; (8001d44 <HAL_GPIO_Init+0x2f0>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d025      	beq.n	8001d48 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <HAL_GPIO_Init+0x2f0>)
 8001cfe:	68da      	ldr	r2, [r3, #12]
 8001d00:	4910      	ldr	r1, [pc, #64]	; (8001d44 <HAL_GPIO_Init+0x2f0>)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	60cb      	str	r3, [r1, #12]
 8001d08:	e025      	b.n	8001d56 <HAL_GPIO_Init+0x302>
 8001d0a:	bf00      	nop
 8001d0c:	10320000 	.word	0x10320000
 8001d10:	10310000 	.word	0x10310000
 8001d14:	10220000 	.word	0x10220000
 8001d18:	10210000 	.word	0x10210000
 8001d1c:	10120000 	.word	0x10120000
 8001d20:	10110000 	.word	0x10110000
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40010000 	.word	0x40010000
 8001d2c:	40010800 	.word	0x40010800
 8001d30:	40010c00 	.word	0x40010c00
 8001d34:	40011000 	.word	0x40011000
 8001d38:	40011400 	.word	0x40011400
 8001d3c:	40011800 	.word	0x40011800
 8001d40:	40011c00 	.word	0x40011c00
 8001d44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_GPIO_Init+0x324>)
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	4909      	ldr	r1, [pc, #36]	; (8001d78 <HAL_GPIO_Init+0x324>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	3301      	adds	r3, #1
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	fa22 f303 	lsr.w	r3, r2, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f47f ae7e 	bne.w	8001a68 <HAL_GPIO_Init+0x14>
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	372c      	adds	r7, #44	; 0x2c
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr
 8001d78:	40010400 	.word	0x40010400

08001d7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e26c      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 8087 	beq.w	8001eaa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d9c:	4b92      	ldr	r3, [pc, #584]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 030c 	and.w	r3, r3, #12
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d00c      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001da8:	4b8f      	ldr	r3, [pc, #572]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 030c 	and.w	r3, r3, #12
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d112      	bne.n	8001dda <HAL_RCC_OscConfig+0x5e>
 8001db4:	4b8c      	ldr	r3, [pc, #560]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc0:	d10b      	bne.n	8001dda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc2:	4b89      	ldr	r3, [pc, #548]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d06c      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x12c>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d168      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e246      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de2:	d106      	bne.n	8001df2 <HAL_RCC_OscConfig+0x76>
 8001de4:	4b80      	ldr	r3, [pc, #512]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a7f      	ldr	r2, [pc, #508]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	e02e      	b.n	8001e50 <HAL_RCC_OscConfig+0xd4>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10c      	bne.n	8001e14 <HAL_RCC_OscConfig+0x98>
 8001dfa:	4b7b      	ldr	r3, [pc, #492]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a7a      	ldr	r2, [pc, #488]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	4b78      	ldr	r3, [pc, #480]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a77      	ldr	r2, [pc, #476]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	e01d      	b.n	8001e50 <HAL_RCC_OscConfig+0xd4>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0xbc>
 8001e1e:	4b72      	ldr	r3, [pc, #456]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a71      	ldr	r2, [pc, #452]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	4b6f      	ldr	r3, [pc, #444]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a6e      	ldr	r2, [pc, #440]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e00b      	b.n	8001e50 <HAL_RCC_OscConfig+0xd4>
 8001e38:	4b6b      	ldr	r3, [pc, #428]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a6a      	ldr	r2, [pc, #424]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	4b68      	ldr	r3, [pc, #416]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a67      	ldr	r2, [pc, #412]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d013      	beq.n	8001e80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7ff f80e 	bl	8000e78 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e60:	f7ff f80a 	bl	8000e78 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b64      	cmp	r3, #100	; 0x64
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e1fa      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e72:	4b5d      	ldr	r3, [pc, #372]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f0      	beq.n	8001e60 <HAL_RCC_OscConfig+0xe4>
 8001e7e:	e014      	b.n	8001eaa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7fe fffa 	bl	8000e78 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e88:	f7fe fff6 	bl	8000e78 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b64      	cmp	r3, #100	; 0x64
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e1e6      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9a:	4b53      	ldr	r3, [pc, #332]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x10c>
 8001ea6:	e000      	b.n	8001eaa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d063      	beq.n	8001f7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eb6:	4b4c      	ldr	r3, [pc, #304]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 030c 	and.w	r3, r3, #12
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00b      	beq.n	8001eda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ec2:	4b49      	ldr	r3, [pc, #292]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d11c      	bne.n	8001f08 <HAL_RCC_OscConfig+0x18c>
 8001ece:	4b46      	ldr	r3, [pc, #280]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d116      	bne.n	8001f08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eda:	4b43      	ldr	r3, [pc, #268]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d005      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x176>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d001      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e1ba      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef2:	4b3d      	ldr	r3, [pc, #244]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4939      	ldr	r1, [pc, #228]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f06:	e03a      	b.n	8001f7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d020      	beq.n	8001f52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f10:	4b36      	ldr	r3, [pc, #216]	; (8001fec <HAL_RCC_OscConfig+0x270>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f16:	f7fe ffaf 	bl	8000e78 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f1e:	f7fe ffab 	bl	8000e78 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e19b      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f30:	4b2d      	ldr	r3, [pc, #180]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3c:	4b2a      	ldr	r3, [pc, #168]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4927      	ldr	r1, [pc, #156]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]
 8001f50:	e015      	b.n	8001f7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f52:	4b26      	ldr	r3, [pc, #152]	; (8001fec <HAL_RCC_OscConfig+0x270>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7fe ff8e 	bl	8000e78 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f60:	f7fe ff8a 	bl	8000e78 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e17a      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f72:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d03a      	beq.n	8002000 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d019      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f92:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f98:	f7fe ff6e 	bl	8000e78 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa0:	f7fe ff6a 	bl	8000e78 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e15a      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb2:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	f000 fada 	bl	8002578 <RCC_Delay>
 8001fc4:	e01c      	b.n	8002000 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fcc:	f7fe ff54 	bl	8000e78 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd2:	e00f      	b.n	8001ff4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd4:	f7fe ff50 	bl	8000e78 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d908      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e140      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	42420000 	.word	0x42420000
 8001ff0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff4:	4b9e      	ldr	r3, [pc, #632]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1e9      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 80a6 	beq.w	800215a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800200e:	2300      	movs	r3, #0
 8002010:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002012:	4b97      	ldr	r3, [pc, #604]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10d      	bne.n	800203a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800201e:	4b94      	ldr	r3, [pc, #592]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	4a93      	ldr	r2, [pc, #588]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002028:	61d3      	str	r3, [r2, #28]
 800202a:	4b91      	ldr	r3, [pc, #580]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002036:	2301      	movs	r3, #1
 8002038:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203a:	4b8e      	ldr	r3, [pc, #568]	; (8002274 <HAL_RCC_OscConfig+0x4f8>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002042:	2b00      	cmp	r3, #0
 8002044:	d118      	bne.n	8002078 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002046:	4b8b      	ldr	r3, [pc, #556]	; (8002274 <HAL_RCC_OscConfig+0x4f8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a8a      	ldr	r2, [pc, #552]	; (8002274 <HAL_RCC_OscConfig+0x4f8>)
 800204c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002052:	f7fe ff11 	bl	8000e78 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205a:	f7fe ff0d 	bl	8000e78 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b64      	cmp	r3, #100	; 0x64
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e0fd      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206c:	4b81      	ldr	r3, [pc, #516]	; (8002274 <HAL_RCC_OscConfig+0x4f8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d106      	bne.n	800208e <HAL_RCC_OscConfig+0x312>
 8002080:	4b7b      	ldr	r3, [pc, #492]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4a7a      	ldr	r2, [pc, #488]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	6213      	str	r3, [r2, #32]
 800208c:	e02d      	b.n	80020ea <HAL_RCC_OscConfig+0x36e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x334>
 8002096:	4b76      	ldr	r3, [pc, #472]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	4a75      	ldr	r2, [pc, #468]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 800209c:	f023 0301 	bic.w	r3, r3, #1
 80020a0:	6213      	str	r3, [r2, #32]
 80020a2:	4b73      	ldr	r3, [pc, #460]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4a72      	ldr	r2, [pc, #456]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	f023 0304 	bic.w	r3, r3, #4
 80020ac:	6213      	str	r3, [r2, #32]
 80020ae:	e01c      	b.n	80020ea <HAL_RCC_OscConfig+0x36e>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2b05      	cmp	r3, #5
 80020b6:	d10c      	bne.n	80020d2 <HAL_RCC_OscConfig+0x356>
 80020b8:	4b6d      	ldr	r3, [pc, #436]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	4a6c      	ldr	r2, [pc, #432]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020be:	f043 0304 	orr.w	r3, r3, #4
 80020c2:	6213      	str	r3, [r2, #32]
 80020c4:	4b6a      	ldr	r3, [pc, #424]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	4a69      	ldr	r2, [pc, #420]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	6213      	str	r3, [r2, #32]
 80020d0:	e00b      	b.n	80020ea <HAL_RCC_OscConfig+0x36e>
 80020d2:	4b67      	ldr	r3, [pc, #412]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	4a66      	ldr	r2, [pc, #408]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020d8:	f023 0301 	bic.w	r3, r3, #1
 80020dc:	6213      	str	r3, [r2, #32]
 80020de:	4b64      	ldr	r3, [pc, #400]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	4a63      	ldr	r2, [pc, #396]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020e4:	f023 0304 	bic.w	r3, r3, #4
 80020e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d015      	beq.n	800211e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f2:	f7fe fec1 	bl	8000e78 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f8:	e00a      	b.n	8002110 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fa:	f7fe febd 	bl	8000e78 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f241 3288 	movw	r2, #5000	; 0x1388
 8002108:	4293      	cmp	r3, r2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e0ab      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002110:	4b57      	ldr	r3, [pc, #348]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0ee      	beq.n	80020fa <HAL_RCC_OscConfig+0x37e>
 800211c:	e014      	b.n	8002148 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211e:	f7fe feab 	bl	8000e78 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002124:	e00a      	b.n	800213c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002126:	f7fe fea7 	bl	8000e78 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	f241 3288 	movw	r2, #5000	; 0x1388
 8002134:	4293      	cmp	r3, r2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e095      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800213c:	4b4c      	ldr	r3, [pc, #304]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1ee      	bne.n	8002126 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002148:	7dfb      	ldrb	r3, [r7, #23]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d105      	bne.n	800215a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800214e:	4b48      	ldr	r3, [pc, #288]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	4a47      	ldr	r2, [pc, #284]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002158:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 8081 	beq.w	8002266 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002164:	4b42      	ldr	r3, [pc, #264]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 030c 	and.w	r3, r3, #12
 800216c:	2b08      	cmp	r3, #8
 800216e:	d061      	beq.n	8002234 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d146      	bne.n	8002206 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002178:	4b3f      	ldr	r3, [pc, #252]	; (8002278 <HAL_RCC_OscConfig+0x4fc>)
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217e:	f7fe fe7b 	bl	8000e78 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002186:	f7fe fe77 	bl	8000e78 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e067      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002198:	4b35      	ldr	r3, [pc, #212]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f0      	bne.n	8002186 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ac:	d108      	bne.n	80021c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021ae:	4b30      	ldr	r3, [pc, #192]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	492d      	ldr	r1, [pc, #180]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c0:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a19      	ldr	r1, [r3, #32]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	430b      	orrs	r3, r1
 80021d2:	4927      	ldr	r1, [pc, #156]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d8:	4b27      	ldr	r3, [pc, #156]	; (8002278 <HAL_RCC_OscConfig+0x4fc>)
 80021da:	2201      	movs	r2, #1
 80021dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021de:	f7fe fe4b 	bl	8000e78 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e6:	f7fe fe47 	bl	8000e78 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e037      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021f8:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0x46a>
 8002204:	e02f      	b.n	8002266 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002206:	4b1c      	ldr	r3, [pc, #112]	; (8002278 <HAL_RCC_OscConfig+0x4fc>)
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7fe fe34 	bl	8000e78 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002214:	f7fe fe30 	bl	8000e78 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e020      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002226:	4b12      	ldr	r3, [pc, #72]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x498>
 8002232:	e018      	b.n	8002266 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d101      	bne.n	8002240 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e013      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	429a      	cmp	r2, r3
 8002252:	d106      	bne.n	8002262 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800225e:	429a      	cmp	r2, r3
 8002260:	d001      	beq.n	8002266 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40021000 	.word	0x40021000
 8002274:	40007000 	.word	0x40007000
 8002278:	42420060 	.word	0x42420060

0800227c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0d0      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002290:	4b6a      	ldr	r3, [pc, #424]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d910      	bls.n	80022c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229e:	4b67      	ldr	r3, [pc, #412]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 0207 	bic.w	r2, r3, #7
 80022a6:	4965      	ldr	r1, [pc, #404]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ae:	4b63      	ldr	r3, [pc, #396]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0b8      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d020      	beq.n	800230e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d8:	4b59      	ldr	r3, [pc, #356]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	4a58      	ldr	r2, [pc, #352]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d005      	beq.n	80022fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022f0:	4b53      	ldr	r3, [pc, #332]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	4a52      	ldr	r2, [pc, #328]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022fc:	4b50      	ldr	r3, [pc, #320]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	494d      	ldr	r1, [pc, #308]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	4313      	orrs	r3, r2
 800230c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d040      	beq.n	800239c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d107      	bne.n	8002332 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002322:	4b47      	ldr	r3, [pc, #284]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d115      	bne.n	800235a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e07f      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d107      	bne.n	800234a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233a:	4b41      	ldr	r3, [pc, #260]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d109      	bne.n	800235a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e073      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234a:	4b3d      	ldr	r3, [pc, #244]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e06b      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800235a:	4b39      	ldr	r3, [pc, #228]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f023 0203 	bic.w	r2, r3, #3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	4936      	ldr	r1, [pc, #216]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	4313      	orrs	r3, r2
 800236a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800236c:	f7fe fd84 	bl	8000e78 <HAL_GetTick>
 8002370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002372:	e00a      	b.n	800238a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002374:	f7fe fd80 	bl	8000e78 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002382:	4293      	cmp	r3, r2
 8002384:	d901      	bls.n	800238a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e053      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238a:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 020c 	and.w	r2, r3, #12
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	429a      	cmp	r2, r3
 800239a:	d1eb      	bne.n	8002374 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800239c:	4b27      	ldr	r3, [pc, #156]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d210      	bcs.n	80023cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	4b24      	ldr	r3, [pc, #144]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 0207 	bic.w	r2, r3, #7
 80023b2:	4922      	ldr	r1, [pc, #136]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ba:	4b20      	ldr	r3, [pc, #128]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e032      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d8:	4b19      	ldr	r3, [pc, #100]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	4916      	ldr	r1, [pc, #88]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d009      	beq.n	800240a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023f6:	4b12      	ldr	r3, [pc, #72]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	490e      	ldr	r1, [pc, #56]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 8002406:	4313      	orrs	r3, r2
 8002408:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800240a:	f000 f821 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 800240e:	4602      	mov	r2, r0
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	091b      	lsrs	r3, r3, #4
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	490a      	ldr	r1, [pc, #40]	; (8002444 <HAL_RCC_ClockConfig+0x1c8>)
 800241c:	5ccb      	ldrb	r3, [r1, r3]
 800241e:	fa22 f303 	lsr.w	r3, r2, r3
 8002422:	4a09      	ldr	r2, [pc, #36]	; (8002448 <HAL_RCC_ClockConfig+0x1cc>)
 8002424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <HAL_RCC_ClockConfig+0x1d0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe fce2 	bl	8000df4 <HAL_InitTick>

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40022000 	.word	0x40022000
 8002440:	40021000 	.word	0x40021000
 8002444:	08003038 	.word	0x08003038
 8002448:	20000008 	.word	0x20000008
 800244c:	2000000c 	.word	0x2000000c

08002450 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002450:	b490      	push	{r4, r7}
 8002452:	b08a      	sub	sp, #40	; 0x28
 8002454:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002456:	4b2a      	ldr	r3, [pc, #168]	; (8002500 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002458:	1d3c      	adds	r4, r7, #4
 800245a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800245c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002460:	f240 2301 	movw	r3, #513	; 0x201
 8002464:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	2300      	movs	r3, #0
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800247a:	4b22      	ldr	r3, [pc, #136]	; (8002504 <HAL_RCC_GetSysClockFreq+0xb4>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b04      	cmp	r3, #4
 8002488:	d002      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x40>
 800248a:	2b08      	cmp	r3, #8
 800248c:	d003      	beq.n	8002496 <HAL_RCC_GetSysClockFreq+0x46>
 800248e:	e02d      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002490:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002492:	623b      	str	r3, [r7, #32]
      break;
 8002494:	e02d      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	0c9b      	lsrs	r3, r3, #18
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024a2:	4413      	add	r3, r2
 80024a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d013      	beq.n	80024dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024b4:	4b13      	ldr	r3, [pc, #76]	; (8002504 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	0c5b      	lsrs	r3, r3, #17
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024c2:	4413      	add	r3, r2
 80024c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80024c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	4a0e      	ldr	r2, [pc, #56]	; (8002508 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ce:	fb02 f203 	mul.w	r2, r2, r3
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
 80024da:	e004      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	4a0b      	ldr	r2, [pc, #44]	; (800250c <HAL_RCC_GetSysClockFreq+0xbc>)
 80024e0:	fb02 f303 	mul.w	r3, r2, r3
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	623b      	str	r3, [r7, #32]
      break;
 80024ea:	e002      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024ec:	4b08      	ldr	r3, [pc, #32]	; (8002510 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024ee:	623b      	str	r3, [r7, #32]
      break;
 80024f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024f2:	6a3b      	ldr	r3, [r7, #32]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3728      	adds	r7, #40	; 0x28
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc90      	pop	{r4, r7}
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	08003028 	.word	0x08003028
 8002504:	40021000 	.word	0x40021000
 8002508:	00b71b00 	.word	0x00b71b00
 800250c:	003d0900 	.word	0x003d0900
 8002510:	007a1200 	.word	0x007a1200

08002514 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002518:	4b02      	ldr	r3, [pc, #8]	; (8002524 <HAL_RCC_GetHCLKFreq+0x10>)
 800251a:	681b      	ldr	r3, [r3, #0]
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr
 8002524:	20000008 	.word	0x20000008

08002528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800252c:	f7ff fff2 	bl	8002514 <HAL_RCC_GetHCLKFreq>
 8002530:	4602      	mov	r2, r0
 8002532:	4b05      	ldr	r3, [pc, #20]	; (8002548 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	0a1b      	lsrs	r3, r3, #8
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	4903      	ldr	r1, [pc, #12]	; (800254c <HAL_RCC_GetPCLK1Freq+0x24>)
 800253e:	5ccb      	ldrb	r3, [r1, r3]
 8002540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002544:	4618      	mov	r0, r3
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40021000 	.word	0x40021000
 800254c:	08003048 	.word	0x08003048

08002550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002554:	f7ff ffde 	bl	8002514 <HAL_RCC_GetHCLKFreq>
 8002558:	4602      	mov	r2, r0
 800255a:	4b05      	ldr	r3, [pc, #20]	; (8002570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	0adb      	lsrs	r3, r3, #11
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	4903      	ldr	r1, [pc, #12]	; (8002574 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002566:	5ccb      	ldrb	r3, [r1, r3]
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800256c:	4618      	mov	r0, r3
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40021000 	.word	0x40021000
 8002574:	08003048 	.word	0x08003048

08002578 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002580:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <RCC_Delay+0x34>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <RCC_Delay+0x38>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	0a5b      	lsrs	r3, r3, #9
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	fb02 f303 	mul.w	r3, r2, r3
 8002592:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002594:	bf00      	nop
  }
  while (Delay --);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1e5a      	subs	r2, r3, #1
 800259a:	60fa      	str	r2, [r7, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f9      	bne.n	8002594 <RCC_Delay+0x1c>
}
 80025a0:	bf00      	nop
 80025a2:	bf00      	nop
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	20000008 	.word	0x20000008
 80025b0:	10624dd3 	.word	0x10624dd3

080025b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d07d      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80025d0:	2300      	movs	r3, #0
 80025d2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d4:	4b4f      	ldr	r3, [pc, #316]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10d      	bne.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e0:	4b4c      	ldr	r3, [pc, #304]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	4a4b      	ldr	r2, [pc, #300]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ea:	61d3      	str	r3, [r2, #28]
 80025ec:	4b49      	ldr	r3, [pc, #292]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025f8:	2301      	movs	r3, #1
 80025fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fc:	4b46      	ldr	r3, [pc, #280]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002604:	2b00      	cmp	r3, #0
 8002606:	d118      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002608:	4b43      	ldr	r3, [pc, #268]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a42      	ldr	r2, [pc, #264]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800260e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002612:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002614:	f7fe fc30 	bl	8000e78 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261a:	e008      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261c:	f7fe fc2c 	bl	8000e78 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b64      	cmp	r3, #100	; 0x64
 8002628:	d901      	bls.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e06d      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262e:	4b3a      	ldr	r3, [pc, #232]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800263a:	4b36      	ldr	r3, [pc, #216]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002642:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d02e      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	429a      	cmp	r2, r3
 8002656:	d027      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002658:	4b2e      	ldr	r3, [pc, #184]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002660:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002662:	4b2e      	ldr	r3, [pc, #184]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002664:	2201      	movs	r2, #1
 8002666:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002668:	4b2c      	ldr	r3, [pc, #176]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800266e:	4a29      	ldr	r2, [pc, #164]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d014      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267e:	f7fe fbfb 	bl	8000e78 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002684:	e00a      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002686:	f7fe fbf7 	bl	8000e78 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	f241 3288 	movw	r2, #5000	; 0x1388
 8002694:	4293      	cmp	r3, r2
 8002696:	d901      	bls.n	800269c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e036      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269c:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0ee      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026a8:	4b1a      	ldr	r3, [pc, #104]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4917      	ldr	r1, [pc, #92]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026ba:	7dfb      	ldrb	r3, [r7, #23]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d105      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c0:	4b14      	ldr	r3, [pc, #80]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	4a13      	ldr	r2, [pc, #76]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026d8:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	490b      	ldr	r1, [pc, #44]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0310 	and.w	r3, r3, #16
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d008      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026f6:	4b07      	ldr	r3, [pc, #28]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	4904      	ldr	r1, [pc, #16]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40021000 	.word	0x40021000
 8002718:	40007000 	.word	0x40007000
 800271c:	42420440 	.word	0x42420440

08002720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e041      	b.n	80027b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fe fa54 	bl	8000bf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3304      	adds	r3, #4
 800275c:	4619      	mov	r1, r3
 800275e:	4610      	mov	r0, r2
 8002760:	f000 f8f2 	bl	8002948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b084      	sub	sp, #16
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <HAL_TIM_ConfigClockSource+0x18>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e0b3      	b.n	800293e <HAL_TIM_ConfigClockSource+0x180>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2202      	movs	r2, #2
 80027e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027f4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027fc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800280e:	d03e      	beq.n	800288e <HAL_TIM_ConfigClockSource+0xd0>
 8002810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002814:	f200 8087 	bhi.w	8002926 <HAL_TIM_ConfigClockSource+0x168>
 8002818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800281c:	f000 8085 	beq.w	800292a <HAL_TIM_ConfigClockSource+0x16c>
 8002820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002824:	d87f      	bhi.n	8002926 <HAL_TIM_ConfigClockSource+0x168>
 8002826:	2b70      	cmp	r3, #112	; 0x70
 8002828:	d01a      	beq.n	8002860 <HAL_TIM_ConfigClockSource+0xa2>
 800282a:	2b70      	cmp	r3, #112	; 0x70
 800282c:	d87b      	bhi.n	8002926 <HAL_TIM_ConfigClockSource+0x168>
 800282e:	2b60      	cmp	r3, #96	; 0x60
 8002830:	d050      	beq.n	80028d4 <HAL_TIM_ConfigClockSource+0x116>
 8002832:	2b60      	cmp	r3, #96	; 0x60
 8002834:	d877      	bhi.n	8002926 <HAL_TIM_ConfigClockSource+0x168>
 8002836:	2b50      	cmp	r3, #80	; 0x50
 8002838:	d03c      	beq.n	80028b4 <HAL_TIM_ConfigClockSource+0xf6>
 800283a:	2b50      	cmp	r3, #80	; 0x50
 800283c:	d873      	bhi.n	8002926 <HAL_TIM_ConfigClockSource+0x168>
 800283e:	2b40      	cmp	r3, #64	; 0x40
 8002840:	d058      	beq.n	80028f4 <HAL_TIM_ConfigClockSource+0x136>
 8002842:	2b40      	cmp	r3, #64	; 0x40
 8002844:	d86f      	bhi.n	8002926 <HAL_TIM_ConfigClockSource+0x168>
 8002846:	2b30      	cmp	r3, #48	; 0x30
 8002848:	d064      	beq.n	8002914 <HAL_TIM_ConfigClockSource+0x156>
 800284a:	2b30      	cmp	r3, #48	; 0x30
 800284c:	d86b      	bhi.n	8002926 <HAL_TIM_ConfigClockSource+0x168>
 800284e:	2b20      	cmp	r3, #32
 8002850:	d060      	beq.n	8002914 <HAL_TIM_ConfigClockSource+0x156>
 8002852:	2b20      	cmp	r3, #32
 8002854:	d867      	bhi.n	8002926 <HAL_TIM_ConfigClockSource+0x168>
 8002856:	2b00      	cmp	r3, #0
 8002858:	d05c      	beq.n	8002914 <HAL_TIM_ConfigClockSource+0x156>
 800285a:	2b10      	cmp	r3, #16
 800285c:	d05a      	beq.n	8002914 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800285e:	e062      	b.n	8002926 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	6899      	ldr	r1, [r3, #8]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f000 f95b 	bl	8002b2a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002882:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	609a      	str	r2, [r3, #8]
      break;
 800288c:	e04e      	b.n	800292c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6818      	ldr	r0, [r3, #0]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	6899      	ldr	r1, [r3, #8]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f000 f944 	bl	8002b2a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028b0:	609a      	str	r2, [r3, #8]
      break;
 80028b2:	e03b      	b.n	800292c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6818      	ldr	r0, [r3, #0]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	6859      	ldr	r1, [r3, #4]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	461a      	mov	r2, r3
 80028c2:	f000 f8bb 	bl	8002a3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2150      	movs	r1, #80	; 0x50
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 f912 	bl	8002af6 <TIM_ITRx_SetConfig>
      break;
 80028d2:	e02b      	b.n	800292c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	6859      	ldr	r1, [r3, #4]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	461a      	mov	r2, r3
 80028e2:	f000 f8d9 	bl	8002a98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2160      	movs	r1, #96	; 0x60
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 f902 	bl	8002af6 <TIM_ITRx_SetConfig>
      break;
 80028f2:	e01b      	b.n	800292c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6818      	ldr	r0, [r3, #0]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	6859      	ldr	r1, [r3, #4]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	461a      	mov	r2, r3
 8002902:	f000 f89b 	bl	8002a3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2140      	movs	r1, #64	; 0x40
 800290c:	4618      	mov	r0, r3
 800290e:	f000 f8f2 	bl	8002af6 <TIM_ITRx_SetConfig>
      break;
 8002912:	e00b      	b.n	800292c <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4619      	mov	r1, r3
 800291e:	4610      	mov	r0, r2
 8002920:	f000 f8e9 	bl	8002af6 <TIM_ITRx_SetConfig>
        break;
 8002924:	e002      	b.n	800292c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002926:	bf00      	nop
 8002928:	e000      	b.n	800292c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800292a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a33      	ldr	r2, [pc, #204]	; (8002a28 <TIM_Base_SetConfig+0xe0>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d013      	beq.n	8002988 <TIM_Base_SetConfig+0x40>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a32      	ldr	r2, [pc, #200]	; (8002a2c <TIM_Base_SetConfig+0xe4>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d00f      	beq.n	8002988 <TIM_Base_SetConfig+0x40>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800296e:	d00b      	beq.n	8002988 <TIM_Base_SetConfig+0x40>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a2f      	ldr	r2, [pc, #188]	; (8002a30 <TIM_Base_SetConfig+0xe8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d007      	beq.n	8002988 <TIM_Base_SetConfig+0x40>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a2e      	ldr	r2, [pc, #184]	; (8002a34 <TIM_Base_SetConfig+0xec>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d003      	beq.n	8002988 <TIM_Base_SetConfig+0x40>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a2d      	ldr	r2, [pc, #180]	; (8002a38 <TIM_Base_SetConfig+0xf0>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d108      	bne.n	800299a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4313      	orrs	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a22      	ldr	r2, [pc, #136]	; (8002a28 <TIM_Base_SetConfig+0xe0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d013      	beq.n	80029ca <TIM_Base_SetConfig+0x82>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a21      	ldr	r2, [pc, #132]	; (8002a2c <TIM_Base_SetConfig+0xe4>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d00f      	beq.n	80029ca <TIM_Base_SetConfig+0x82>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b0:	d00b      	beq.n	80029ca <TIM_Base_SetConfig+0x82>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a1e      	ldr	r2, [pc, #120]	; (8002a30 <TIM_Base_SetConfig+0xe8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d007      	beq.n	80029ca <TIM_Base_SetConfig+0x82>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a1d      	ldr	r2, [pc, #116]	; (8002a34 <TIM_Base_SetConfig+0xec>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d003      	beq.n	80029ca <TIM_Base_SetConfig+0x82>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a1c      	ldr	r2, [pc, #112]	; (8002a38 <TIM_Base_SetConfig+0xf0>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d108      	bne.n	80029dc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4313      	orrs	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a09      	ldr	r2, [pc, #36]	; (8002a28 <TIM_Base_SetConfig+0xe0>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d003      	beq.n	8002a10 <TIM_Base_SetConfig+0xc8>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a08      	ldr	r2, [pc, #32]	; (8002a2c <TIM_Base_SetConfig+0xe4>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d103      	bne.n	8002a18 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	691a      	ldr	r2, [r3, #16]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	615a      	str	r2, [r3, #20]
}
 8002a1e:	bf00      	nop
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr
 8002a28:	40012c00 	.word	0x40012c00
 8002a2c:	40013400 	.word	0x40013400
 8002a30:	40000400 	.word	0x40000400
 8002a34:	40000800 	.word	0x40000800
 8002a38:	40000c00 	.word	0x40000c00

08002a3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	f023 0201 	bic.w	r2, r3, #1
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f023 030a 	bic.w	r3, r3, #10
 8002a78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	621a      	str	r2, [r3, #32]
}
 8002a8e:	bf00      	nop
 8002a90:	371c      	adds	r7, #28
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr

08002a98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	f023 0210 	bic.w	r2, r3, #16
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ac2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	031b      	lsls	r3, r3, #12
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ad4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	621a      	str	r2, [r3, #32]
}
 8002aec:	bf00      	nop
 8002aee:	371c      	adds	r7, #28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr

08002af6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b085      	sub	sp, #20
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f043 0307 	orr.w	r3, r3, #7
 8002b18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	609a      	str	r2, [r3, #8]
}
 8002b20:	bf00      	nop
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr

08002b2a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b087      	sub	sp, #28
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	60f8      	str	r0, [r7, #12]
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	607a      	str	r2, [r7, #4]
 8002b36:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b44:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	021a      	lsls	r2, r3, #8
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	609a      	str	r2, [r3, #8]
}
 8002b5e:	bf00      	nop
 8002b60:	371c      	adds	r7, #28
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e050      	b.n	8002c22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a1b      	ldr	r2, [pc, #108]	; (8002c2c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d018      	beq.n	8002bf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a19      	ldr	r2, [pc, #100]	; (8002c30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d013      	beq.n	8002bf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd6:	d00e      	beq.n	8002bf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a15      	ldr	r2, [pc, #84]	; (8002c34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d009      	beq.n	8002bf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a14      	ldr	r2, [pc, #80]	; (8002c38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d004      	beq.n	8002bf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a12      	ldr	r2, [pc, #72]	; (8002c3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d10c      	bne.n	8002c10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr
 8002c2c:	40012c00 	.word	0x40012c00
 8002c30:	40013400 	.word	0x40013400
 8002c34:	40000400 	.word	0x40000400
 8002c38:	40000800 	.word	0x40000800
 8002c3c:	40000c00 	.word	0x40000c00

08002c40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e03f      	b.n	8002cd2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d106      	bne.n	8002c6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7fd ffea 	bl	8000c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2224      	movs	r2, #36	; 0x24
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f905 	bl	8002e94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695a      	ldr	r2, [r3, #20]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ca8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b08a      	sub	sp, #40	; 0x28
 8002cde:	af02      	add	r7, sp, #8
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	603b      	str	r3, [r7, #0]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b20      	cmp	r3, #32
 8002cf8:	d17c      	bne.n	8002df4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <HAL_UART_Transmit+0x2c>
 8002d00:	88fb      	ldrh	r3, [r7, #6]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e075      	b.n	8002df6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_UART_Transmit+0x3e>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e06e      	b.n	8002df6 <HAL_UART_Transmit+0x11c>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2221      	movs	r2, #33	; 0x21
 8002d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d2e:	f7fe f8a3 	bl	8000e78 <HAL_GetTick>
 8002d32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	88fa      	ldrh	r2, [r7, #6]
 8002d38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	88fa      	ldrh	r2, [r7, #6]
 8002d3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d48:	d108      	bne.n	8002d5c <HAL_UART_Transmit+0x82>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d104      	bne.n	8002d5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	61bb      	str	r3, [r7, #24]
 8002d5a:	e003      	b.n	8002d64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d6c:	e02a      	b.n	8002dc4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2200      	movs	r2, #0
 8002d76:	2180      	movs	r1, #128	; 0x80
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 f840 	bl	8002dfe <UART_WaitOnFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e036      	b.n	8002df6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10b      	bne.n	8002da6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	461a      	mov	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	3302      	adds	r3, #2
 8002da2:	61bb      	str	r3, [r7, #24]
 8002da4:	e007      	b.n	8002db6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	781a      	ldrb	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	3301      	adds	r3, #1
 8002db4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1cf      	bne.n	8002d6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2140      	movs	r1, #64	; 0x40
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f810 	bl	8002dfe <UART_WaitOnFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e006      	b.n	8002df6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e000      	b.n	8002df6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
  }
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3720      	adds	r7, #32
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b084      	sub	sp, #16
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	603b      	str	r3, [r7, #0]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e0e:	e02c      	b.n	8002e6a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e16:	d028      	beq.n	8002e6a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d007      	beq.n	8002e2e <UART_WaitOnFlagUntilTimeout+0x30>
 8002e1e:	f7fe f82b 	bl	8000e78 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d21d      	bcs.n	8002e6a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68da      	ldr	r2, [r3, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e3c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695a      	ldr	r2, [r3, #20]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0201 	bic.w	r2, r2, #1
 8002e4c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e00f      	b.n	8002e8a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	4013      	ands	r3, r2
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	bf0c      	ite	eq
 8002e7a:	2301      	moveq	r3, #1
 8002e7c:	2300      	movne	r3, #0
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	461a      	mov	r2, r3
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d0c3      	beq.n	8002e10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ece:	f023 030c 	bic.w	r3, r3, #12
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6812      	ldr	r2, [r2, #0]
 8002ed6:	68b9      	ldr	r1, [r7, #8]
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a2c      	ldr	r2, [pc, #176]	; (8002fa8 <UART_SetConfig+0x114>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d103      	bne.n	8002f04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002efc:	f7ff fb28 	bl	8002550 <HAL_RCC_GetPCLK2Freq>
 8002f00:	60f8      	str	r0, [r7, #12]
 8002f02:	e002      	b.n	8002f0a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f04:	f7ff fb10 	bl	8002528 <HAL_RCC_GetPCLK1Freq>
 8002f08:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	009a      	lsls	r2, r3, #2
 8002f14:	441a      	add	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f20:	4a22      	ldr	r2, [pc, #136]	; (8002fac <UART_SetConfig+0x118>)
 8002f22:	fba2 2303 	umull	r2, r3, r2, r3
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	0119      	lsls	r1, r3, #4
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	009a      	lsls	r2, r3, #2
 8002f34:	441a      	add	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f40:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <UART_SetConfig+0x118>)
 8002f42:	fba3 0302 	umull	r0, r3, r3, r2
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	2064      	movs	r0, #100	; 0x64
 8002f4a:	fb00 f303 	mul.w	r3, r0, r3
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	011b      	lsls	r3, r3, #4
 8002f52:	3332      	adds	r3, #50	; 0x32
 8002f54:	4a15      	ldr	r2, [pc, #84]	; (8002fac <UART_SetConfig+0x118>)
 8002f56:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5a:	095b      	lsrs	r3, r3, #5
 8002f5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f60:	4419      	add	r1, r3
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	009a      	lsls	r2, r3, #2
 8002f6c:	441a      	add	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f78:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <UART_SetConfig+0x118>)
 8002f7a:	fba3 0302 	umull	r0, r3, r3, r2
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	2064      	movs	r0, #100	; 0x64
 8002f82:	fb00 f303 	mul.w	r3, r0, r3
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	3332      	adds	r3, #50	; 0x32
 8002f8c:	4a07      	ldr	r2, [pc, #28]	; (8002fac <UART_SetConfig+0x118>)
 8002f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	f003 020f 	and.w	r2, r3, #15
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	440a      	add	r2, r1
 8002f9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002fa0:	bf00      	nop
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40013800 	.word	0x40013800
 8002fac:	51eb851f 	.word	0x51eb851f

08002fb0 <__libc_init_array>:
 8002fb0:	b570      	push	{r4, r5, r6, lr}
 8002fb2:	2600      	movs	r6, #0
 8002fb4:	4d0c      	ldr	r5, [pc, #48]	; (8002fe8 <__libc_init_array+0x38>)
 8002fb6:	4c0d      	ldr	r4, [pc, #52]	; (8002fec <__libc_init_array+0x3c>)
 8002fb8:	1b64      	subs	r4, r4, r5
 8002fba:	10a4      	asrs	r4, r4, #2
 8002fbc:	42a6      	cmp	r6, r4
 8002fbe:	d109      	bne.n	8002fd4 <__libc_init_array+0x24>
 8002fc0:	f000 f822 	bl	8003008 <_init>
 8002fc4:	2600      	movs	r6, #0
 8002fc6:	4d0a      	ldr	r5, [pc, #40]	; (8002ff0 <__libc_init_array+0x40>)
 8002fc8:	4c0a      	ldr	r4, [pc, #40]	; (8002ff4 <__libc_init_array+0x44>)
 8002fca:	1b64      	subs	r4, r4, r5
 8002fcc:	10a4      	asrs	r4, r4, #2
 8002fce:	42a6      	cmp	r6, r4
 8002fd0:	d105      	bne.n	8002fde <__libc_init_array+0x2e>
 8002fd2:	bd70      	pop	{r4, r5, r6, pc}
 8002fd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd8:	4798      	blx	r3
 8002fda:	3601      	adds	r6, #1
 8002fdc:	e7ee      	b.n	8002fbc <__libc_init_array+0xc>
 8002fde:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fe2:	4798      	blx	r3
 8002fe4:	3601      	adds	r6, #1
 8002fe6:	e7f2      	b.n	8002fce <__libc_init_array+0x1e>
 8002fe8:	08003050 	.word	0x08003050
 8002fec:	08003050 	.word	0x08003050
 8002ff0:	08003050 	.word	0x08003050
 8002ff4:	08003054 	.word	0x08003054

08002ff8 <memset>:
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	4402      	add	r2, r0
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d100      	bne.n	8003002 <memset+0xa>
 8003000:	4770      	bx	lr
 8003002:	f803 1b01 	strb.w	r1, [r3], #1
 8003006:	e7f9      	b.n	8002ffc <memset+0x4>

08003008 <_init>:
 8003008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300a:	bf00      	nop
 800300c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300e:	bc08      	pop	{r3}
 8003010:	469e      	mov	lr, r3
 8003012:	4770      	bx	lr

08003014 <_fini>:
 8003014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003016:	bf00      	nop
 8003018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800301a:	bc08      	pop	{r3}
 800301c:	469e      	mov	lr, r3
 800301e:	4770      	bx	lr
